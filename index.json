[
{
	"uri": "http://HuuDung113.github.io/4-deploylambda/4.1-create-a-new-post-lambda-function/",
	"title": "Create a New Post Lambda Function",
	"tags": [],
	"description": "",
	"content": "In this step, we will create a new AWS Lambda function to handle new posts for text-to-speech conversion.\nSteps to Create the Lambda Function Open the AWS Management Console and search for Lambda.\nChoose Create function.\nSelect Author from scratch and configure the following:\nFunction name: PostReader_NewPost Runtime: Python 3.12 Execution role: Use an existing role Existing role: Lab-Lambda-Role Choose Create function.\nCreate success!\nLambda Function Code import boto3 import os import uuid def lambda_handler(event, context): # Generate a unique ID for the new record recordId = str(uuid.uuid4()) voice = event[\u0026#34;voice\u0026#34;] text = event[\u0026#34;text\u0026#34;] print(f\u0026#39;Generating new DynamoDB record with ID: {recordId}\u0026#39;) print(f\u0026#39;Input Text: {text}\u0026#39;) print(f\u0026#39;Selected Voice: {voice}\u0026#39;) # Create a new record in the DynamoDB table dynamodb = boto3.resource(\u0026#39;dynamodb\u0026#39;) table = dynamodb.Table(os.environ[\u0026#39;DB_TABLE_NAME\u0026#39;]) table.put_item( Item={ \u0026#39;id\u0026#39;: recordId, \u0026#39;text\u0026#39;: text, \u0026#39;voice\u0026#39;: voice, \u0026#39;status\u0026#39;: \u0026#39;PROCESSING\u0026#39; } ) # Send notification about the new post to SNS client = boto3.client(\u0026#39;sns\u0026#39;) client.publish( TopicArn=os.environ[\u0026#39;SNS_TOPIC\u0026#39;], Message=recordId ) return recordId Code Explanation Import Libraries import boto3 import os import uuid boto3: AWS SDK for Python to interact with AWS services. os: Access environment variables. uuid: Generate unique IDs. Generate Record ID recordId = str(uuid.uuid4()) A unique recordId is created for each post using uuid.uuid4(). Extract Input Parameters voice = event[\u0026#34;voice\u0026#34;] text = event[\u0026#34;text\u0026#34;] The function expects an event containing voice and text. Log Information print(f\u0026#39;Generating new DynamoDB record with ID: {recordId}\u0026#39;) print(f\u0026#39;Input Text: {text}\u0026#39;) print(f\u0026#39;Selected Voice: {voice}\u0026#39;) Logs are printed to CloudWatch for debugging. Save Data to DynamoDB dynamodb = boto3.resource(\u0026#39;dynamodb\u0026#39;) table = dynamodb.Table(os.environ[\u0026#39;DB_TABLE_NAME\u0026#39;]) table.put_item( Item={ \u0026#39;id\u0026#39;: recordId, \u0026#39;text\u0026#39;: text, \u0026#39;voice\u0026#39;: voice, \u0026#39;status\u0026#39;: \u0026#39;PROCESSING\u0026#39; } ) The put_item() method stores a new item with fields: id, text, voice, and status. Publish Message to SNS client = boto3.client(\u0026#39;sns\u0026#39;) client.publish( TopicArn=os.environ[\u0026#39;SNS_TOPIC\u0026#39;], Message=recordId ) The publish() method notifies the SNS topic with the recordId. Return Record ID return recordId The ID is returned as the response for tracking purposes. Configure Environment Variables Open the Configuration tab in the Lambda console. Choose Environment variables \u0026gt; Edit \u0026gt; Add environment variable. Key: SNS_TOPIC\nValue: \u0026lt;Paste the SNS Topic ARN\u0026gt; Key: DB_TABLE_NAME\nValue: posts Save the changes. Update Timeout Go to General configuration \u0026gt; Edit. Set Timeout to 10 seconds. Save the changes. Test the Lambda Function Open the Test tab. Configure a new test event named Joanna with the following payload: { \u0026#34;voice\u0026#34;: \u0026#34;Joanna\u0026#34;, \u0026#34;text\u0026#34;: \u0026#34;This is working!\u0026#34; } Save the event. Click Test. Expected Output:\nExecution result: succeeded Log output: Displays the generated recordId and the input parameters. The Lambda function is now ready to handle new posts and trigger subsequent text-to-speech processing.\n"
},
{
	"uri": "http://HuuDung113.github.io/4-deploylambda/4.2-create-a-convert-to-audio-lambda-function/",
	"title": "Create a Convert to Audio Lambda Function",
	"tags": [],
	"description": "",
	"content": "1. Create the Lambda Function Open AWS Management Console. Navigate to Lambda \u0026gt; Functions. Select Create function. Choose Author from scratch and configure as follows: Function name: ConvertToAudio Runtime: Python 3.12 Expand the section: Change default execution role Execution role: Select Use an existing role. Existing role: Lab-Lambda-Role Click Create function. Function created successfully!\n2. Add Code Delete the default code and add the following code:\nimport boto3 import os from contextlib import closing from boto3.dynamodb.conditions import Key def lambda_handler(event, context): postId = event[\u0026#34;Records\u0026#34;][0][\u0026#34;Sns\u0026#34;][\u0026#34;Message\u0026#34;] print(\u0026#34;Text to Speech function. Post ID in DynamoDB: \u0026#34; + postId) # Query the post from DynamoDB dynamodb = boto3.resource(\u0026#39;dynamodb\u0026#39;) table = dynamodb.Table(os.environ[\u0026#39;DB_TABLE_NAME\u0026#39;]) postItem = table.query(KeyConditionExpression=Key(\u0026#39;id\u0026#39;).eq(postId)) text = postItem[\u0026#34;Items\u0026#34;][0][\u0026#34;text\u0026#34;] voice = postItem[\u0026#34;Items\u0026#34;][0][\u0026#34;voice\u0026#34;] rest = text # Split text into blocks of 2600 characters textBlocks = [] while len(rest) \u0026gt; 2600: end = rest.find(\u0026#34;.\u0026#34;, 2500) if end == -1: end = rest.find(\u0026#34; \u0026#34;, 2500) textBlocks.append(rest[:end]) rest = rest[end:] textBlocks.append(rest) # Convert text to speech with Polly polly = boto3.client(\u0026#39;polly\u0026#39;) for textBlock in textBlocks: response = polly.synthesize_speech( OutputFormat=\u0026#39;mp3\u0026#39;, Text=textBlock, VoiceId=voice ) if \u0026#34;AudioStream\u0026#34; in response: with closing(response[\u0026#34;AudioStream\u0026#34;]) as stream: output = os.path.join(\u0026#34;/tmp/\u0026#34;, postId) with open(output, \u0026#34;ab\u0026#34; if os.path.isfile(output) else \u0026#34;wb\u0026#34;) as file: file.write(stream.read()) # Upload MP3 file to S3 s3 = boto3.client(\u0026#39;s3\u0026#39;) s3.upload_file(f\u0026#39;/tmp/{postId}\u0026#39;, os.environ[\u0026#39;BUCKET_NAME\u0026#39;], f\u0026#39;{postId}.mp3\u0026#39;) s3.put_object_acl(ACL=\u0026#39;public-read\u0026#39;, Bucket=os.environ[\u0026#39;BUCKET_NAME\u0026#39;], Key=f\u0026#39;{postId}.mp3\u0026#39;) # Generate audio file URL location = s3.get_bucket_location(Bucket=os.environ[\u0026#39;BUCKET_NAME\u0026#39;]) region = location[\u0026#39;LocationConstraint\u0026#39;] url = f\u0026#34;https://s3-{region}.amazonaws.com/{os.environ[\u0026#39;BUCKET_NAME\u0026#39;]}/{postId}.mp3\u0026#34; if region else f\u0026#34;https://s3.amazonaws.com/{os.environ[\u0026#39;BUCKET_NAME\u0026#39;]}/{postId}.mp3\u0026#34; # Update status and URL in DynamoDB table.update_item( Key={\u0026#39;id\u0026#39;: postId}, UpdateExpression=\u0026#34;SET #status = :s, #url = :u\u0026#34;, ExpressionAttributeNames={\u0026#39;#status\u0026#39;: \u0026#39;status\u0026#39;, \u0026#39;#url\u0026#39;: \u0026#39;url\u0026#39;}, ExpressionAttributeValues={\u0026#39;:s\u0026#39;: \u0026#39;UPDATED\u0026#39;, \u0026#39;:u\u0026#39;: url} ) return { \u0026#34;statusCode\u0026#34;: 200, \u0026#34;body\u0026#34;: f\u0026#34;Audio file created for post {postId}\u0026#34; } Code Explanation Import Libraries import boto3 import os import uuid boto3: AWS SDK for interacting with AWS services. os: Access environment variables. uuid: Generate unique IDs. Generate Post ID recordId = str(uuid.uuid4()) Purpose: Generate a unique ID for each post. Explanation: uuid.uuid4() creates a universally unique identifier. Extract Input Parameters voice = event[\u0026#34;voice\u0026#34;] text = event[\u0026#34;text\u0026#34;] voice: The selected voice for text-to-speech. text: The content to be converted to audio. Log Information print(f\u0026#39;Creating new DynamoDB record with ID: {recordId}\u0026#39;) print(f\u0026#39;Post content: {text}\u0026#39;) print(f\u0026#39;Selected voice: {voice}\u0026#39;) Purpose: Log essential information for debugging. Save Data to DynamoDB dynamodb = boto3.resource(\u0026#39;dynamodb\u0026#39;) table = dynamodb.Table(os.environ[\u0026#39;DB_TABLE_NAME\u0026#39;]) table.put_item( Item={ \u0026#39;id\u0026#39;: recordId, \u0026#39;text\u0026#39;: text, \u0026#39;voice\u0026#39;: voice, \u0026#39;status\u0026#39;: \u0026#39;PROCESSING\u0026#39; } ) Purpose: Insert a new record into the DynamoDB table. Explanation: put_item(): Adds data. Fields: id, text, voice, status. Publish Notification to SNS client = boto3.client(\u0026#39;sns\u0026#39;) client.publish( TopicArn=os.environ[\u0026#39;SNS_TOPIC\u0026#39;], Message=recordId ) Purpose: Notify that a new post requires processing. Explanation: publish(): Sends a message to the SNS topic. Message: Contains the post ID. Return Post ID return recordId Purpose: Return the ID for further processing. 3. Configure Environment Variables DB_TABLE_NAME: posts BUCKET_NAME: audioposts-123 (Replace with your bucket name) 4. Increase Timeout Duration Adjust Timeout: 5 minutes. 5. Add SNS Trigger Trigger: SNS SNS topic: new_posts 6. Deploy and Test Click Deploy to deploy the Lambda function. Then, test it by sending a message to the new_posts SNS topic. If successful, the audio file will appear in the S3 bucket with status UPDATED in DynamoDB.\u0026quot;\n"
},
{
	"uri": "http://HuuDung113.github.io/1-introduce/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Introduction In modern applications, Text-to-Speech (TTS) technology plays a crucial role in enhancing accessibility, improving user experience, and automating content delivery. Amazon Polly is an AWS service that uses deep learning to convert text into natural-sounding speech, helping developers create applications that interact with users in a more engaging and lifelike way.\nBenefits of Using Amazon Polly: 🗣️ High-quality, natural voice: Supports multiple languages and voice options with realistic sound. 🌐 Serverless architecture and scalability: Easily build TTS solutions without managing infrastructure. 🔗 Seamless integration with AWS: Polly integrates smoothly with S3, DynamoDB, Lambda, enabling automated workflows. 💰 Cost-effective solution: Pay-as-you-go pricing model, charging only for the text converted to speech. ⏱️ Real-time and batch processing support: Provides options for both real-time speech synthesis and bulk conversion. 📱 Cross-platform support: Polly’s speech output can be used on the web, mobile, IoT, and other smart devices. Serverless Architecture for TTS Applications A serverless architecture simplifies deployment and maintenance. Below is a typical model for a Text-to-Speech application:\nAWS Lambda: Handles backend logic and calls Polly for speech synthesis. API Gateway: Provides RESTful endpoints to receive text input from users. Amazon Polly: Converts text into speech and returns an audio file. Amazon S3: Stores audio files for later playback. CloudFront (Optional): Enhances content delivery speed and global accessibility through caching. 📌 How the System Works The system consists of 8 steps, as numbered in the diagram:\n1️⃣ User accesses a static website on Amazon S3 The static website is hosted on Amazon S3. When the user submits a request (e.g., entering text for speech conversion), the website sends the request to API Gateway. 2️⃣ API Gateway receives the request and forwards it to AWS Lambda API Gateway acts as an intermediary, passing the request from the frontend (user’s browser) to an AWS Lambda function (Get/Post request). 3️⃣ Lambda processes the request and writes to Amazon DynamoDB The Lambda function validates and stores the text/article in Amazon DynamoDB for data management. 4️⃣ Notification sent via Amazon SNS When new text is added, the system uses Amazon SNS (Simple Notification Service) to notify about the event. 5️⃣ Lambda triggers Amazon Polly for text-to-speech conversion Upon receiving the SNS notification, the Lambda function (Convert to Audio) calls Amazon Polly to generate an audio file (MP3) from the text. 6️⃣ Amazon Polly processes the request Amazon Polly generates an MP3 audio file from the input text. 7️⃣ The audio file is stored in Amazon S3 After Polly generates the MP3 file, the Lambda function saves it in a dedicated Amazon S3 Bucket for audio storage. 8️⃣ DynamoDB updates the status Once the MP3 file is successfully saved, DynamoDB is updated to mark that the article now has an associated audio file. Users can then download or listen to the audio directly from the website. Real-World Applications Amazon Polly has been widely used in various fields, including:\nVirtual Assistants \u0026amp; Chatbots: Enhancing customer experience in support applications. E-learning \u0026amp; Audiobooks: Converting learning materials into audio for better accessibility. Content Narration: Automatically generating voiceovers for news, blogs, and videos. Assistive Technology: Supporting visually impaired users through screen readers. By leveraging Amazon Polly, developers can build powerful and flexible Text-to-Speech applications, delivering natural and engaging user experiences across multiple platforms.\n"
},
{
	"uri": "http://HuuDung113.github.io/3-integratepolly/3.1-create-a-dynamodb-table/",
	"title": "Create a DynamoDB table",
	"tags": [],
	"description": "",
	"content": "Content:\nCreate a DynamoDB table. Configure the necessary fields. Create a DynamoDB Table Task 1: Create a DynamoDB table\nGo to the Amazon DynamoDB Console and select Create table. Enter the following details: Table name: posts Partition key: id (String) Select Default settings and click Create table. The posts table will store the following information:\nid: The ID of the blog post. status: The status of the post (UPDATED or PROCESSING). text: The text content of the blog post. voice: The Amazon Polly voice used to generate the audio file. url: The URL to the MP3 file stored in an S3 bucket. After successfully creating the table, you can proceed with the next steps of the application deployment.\n"
},
{
	"uri": "http://HuuDung113.github.io/3-integratepolly/3.2-create-an-amazon-s3-bucket/",
	"title": "Create an Amazon S3 bucket",
	"tags": [],
	"description": "",
	"content": "Content:\nCreate an Amazon S3 bucket. Configure the necessary permissions. Create an Amazon S3 Bucket Task 1: Create an Amazon S3 Bucket\nGo to the Amazon S3 Console and select Create bucket.\nEnter the following details:\nBucket name: audioposts-NUMBER (replace NUMBER with a random number to ensure uniqueness). Under Object Ownership, choose ACLs enabled.\nUnder Block Public Access settings, deselect Block all public access. 5. Acknowledge the warning by selecting the checkbox next to: I acknowledge that the current settings might result in this bucket and the objects within becoming public.\nClick Create bucket. Important Notes:\nThe bucket name must be globally unique. In a production environment, apply the least permissive settings possible to maintain security. After successfully creating the bucket, you can proceed with integrating it into your application.✅\n"
},
{
	"uri": "http://HuuDung113.github.io/3-integratepolly/3.3-create-an-sns-topic/",
	"title": "Create an SNS topic",
	"tags": [],
	"description": "",
	"content": "In this step, we will create an SNS topic to integrate our Lambda functions.\nSteps Open the AWS Management Console and search for Simple Notification Service (SNS). In the left navigation pane, choose Topics. Click Create topic and configure the following: Type: Standard (allows multiple subscribers and message delivery retries) Name: new_posts (unique name to identify the topic) Display name: New Posts (optional, used for email notifications) Choose Create topic. Configuration Details After creation, copy the Topic ARN and save it for later use. This ARN uniquely identifies the SNS topic and will be required when configuring Lambda triggers. Expected ARN:\narn:aws:sns:us-west-2:123456789012:new_posts Explanation SNS Topic: This topic acts as a communication channel for our Lambda functions. Standard Type: Allows multiple subscribers to receive messages. Topic ARN: This string is needed to grant publishing permissions to Lambda functions. Note: This ARN will be used to integrate the Lambda functions later and should be kept confidential for security purposes. ✅\n"
},
{
	"uri": "http://HuuDung113.github.io/2-prerequiste/",
	"title": "Preparation",
	"tags": [],
	"description": "",
	"content": "Preparation Steps This section covers the necessary setup before starting the workshop.\n1. AWS Account Setup Ensure you have an AWS account with administrative privileges. 2. Install AWS CLI and Boto3 Install AWS CLI: pip install awscli Configure AWS CLI: aws configure Install Boto3: pip install boto3 3. CloudFormation Setup 1. Download the CloudFormation template\n2. Store the YAML template file in a folder on your local machine.\n3. Navigate to CloudFormation in the AWS Management Console.\n4. On the CloudFormation console, choose Upload a template file.\n5. Select the template that you just downloaded, and then choose Next.\n6. Give the stack a name, such as polly-serverless-stack\n7. For Configure stack options, keep the default values and choose Next.\n8. In Capabilities and transforms, acknowledge all.\n9. To deploy the template, choose Submit.\n9. After the template is deployed, to review the created resources, navigate to CloudFormation Resources , and then select the CloudFormation stack that you created.\nCreated successfully. 4. Required Permissions Ensure IAM roles have permissions for: Amazon Polly Lambda API Gateway S3 5. Local Environment Setup Install Python, VS Code, and necessary libraries. 6. Verify AWS Resources Check resources in AWS CloudFormation after deployment. "
},
{
	"uri": "http://HuuDung113.github.io/4-deploylambda/4.3-test-the-functions/",
	"title": "Test the functions",
	"tags": [],
	"description": "",
	"content": "1. Activate the New Post Lambda Function Open AWS Management Console. In the top left corner, select Lambda \u0026gt; Functions. Choose the function PostReader_NewPost. 4. Click Test to trigger the function.\nIf successful, you will see the message: Execution result: success. 2. Verify Data in DynamoDB In the AWS search bar, search for and select DynamoDB. In the left-hand navigation pane, select Explore Items. Select the table posts. Check if there are two entries (corresponding to two test runs): The second entry will have the url field if the audio conversion process was successful. 3. Test the ConvertToAudio Lambda Function In the AWS search bar, search for and select Lambda. Select the function ConvertToAudio. Click the Monitoring tab. View the Invocations and Success Rate graphs: If the graph shows successful activity, proceed to the next step. If there is an error, click View CloudWatch Logs to check the error message. Example: The specified bucket does not exist → Check the bucket name in the Environment Variables. 4. Verify the Audio File in S3 In the AWS search bar, search for and select S3. Select the bucket where the audio files are stored (e.g., audioposts-0110). Look for the MP3 file with the name corresponding to the postId. Download and open the file to listen: If the content is correct, you will hear Polly saying: This works! 5. Handle Errors (if any) If the MP3 file does not appear: Check the CloudWatch Logs of ConvertToAudio Lambda. Check for errors and fix them in the Log events. Check the permissions on the S3 bucket (ensure the file is set to public-read). If the audio is incorrect: Check the text in DynamoDB. Verify the VoiceId setting in the Lambda code. Expected Result:\nMP3 audio files are saved in the S3 bucket. The URL of the audio file is updated in DynamoDB. When you download the MP3 file, you will hear the voice from Amazon Polly reading the content of the post correctly. "
},
{
	"uri": "http://HuuDung113.github.io/4-deploylambda/4.4-create-a-get-post-lambda-function/",
	"title": "Create Lambda Function Get Post",
	"tags": [],
	"description": "",
	"content": "1. Create Lambda Function Get Post Open AWS Management Console. In the search bar, type Lambda and select the corresponding result. Click Create function. Select Author from scratch and set the following parameters: Function name: PostReader_GetPost Runtime: Python 3.12 Expand the Change default execution role section: Execution role: Use an existing role Existing role: Lab-Lambda-Role Scroll down and click Create function. Successfully created! ✅ ![Complete] (/images/4-deploylambda/4.4/3.png)\n2. Add Source Code for Lambda Below is the source code along with a detailed explanation:\nimport boto3 import os from boto3.dynamodb.conditions import Key, Attr def lambda_handler(event, context): # Retrieve postId from the input event postId = event[\u0026#34;postId\u0026#34;] # Initialize DynamoDB resource dynamodb = boto3.resource(\u0026#39;dynamodb\u0026#39;) # Connect to the specified table using an environment variable table = dynamodb.Table(os.environ[\u0026#39;DB_TABLE_NAME\u0026#39;]) # If postId is \u0026#39;*\u0026#39;, retrieve all posts if postId == \u0026#34;*\u0026#34;: # Use scan() to get all items from the table items = table.scan() else: # Use query() to get the item with a specific ID items = table.query( KeyConditionExpression=Key(\u0026#39;id\u0026#39;).eq(postId) ) # Return the retrieved items as the response return items[\u0026#34;Items\u0026#34;] Code Explanation: Import Libraries: import boto3 import os from boto3.dynamodb.conditions import Key, Attr boto3: AWS SDK for Python to interact with DynamoDB. os: Access environment variables for configuration. boto3.dynamodb.conditions: Supports query operations with key conditions. Retrieve Input Parameter: postId = event[\u0026#34;postId\u0026#34;] The function receives an event containing postId. Initialize DynamoDB: dynamodb = boto3.resource(\u0026#39;dynamodb\u0026#39;) table = dynamodb.Table(os.environ[\u0026#39;DB_TABLE_NAME\u0026#39;]) Connect to the DynamoDB table specified by the DB_TABLE_NAME environment variable. Query Logic: if postId == \u0026#34;*\u0026#34;: items = table.scan() else: items = table.query( KeyConditionExpression=Key(\u0026#39;id\u0026#39;).eq(postId) ) If postId is *, the function retrieves all posts using scan(). If a specific postId is provided, the function queries the corresponding post using query(). ⚠️ Note: Using scan() on large tables can affect performance.\nReturn Results: return items[\u0026#34;Items\u0026#34;] Returns the list of retrieved posts from the database. 3. Deploy the Function Click Deploy to deploy the source code. 4. Configure Environment Variables Go to the Configuration tab. From the left navigation menu, select Environment variables. Click Edit. Click Add environment variable and add: Key: DB_TABLE_NAME Value: posts Click Save. 5. Test the Lambda Function Go to the Test tab. Select Create new test event. Name the event AllPosts. Replace the event content with the following JSON: { \u0026#34;postId\u0026#34;: \u0026#34;*\u0026#34; } Click Save. Click Test to run the test. Expected Outcome:\nDisplays the message: Execution result: succeeded. Expand the Details section to view the list of posts from DynamoDB. 🎯 Successfully created the Lambda Get Post function.✅\n"
},
{
	"uri": "http://HuuDung113.github.io/3-integratepolly/",
	"title": "Integratepolly",
	"tags": [],
	"description": "",
	"content": "This section provides a step-by-step guide to integrate Amazon Polly with AWS services. It includes creating an S3 bucket for audio storage, setting up an SNS topic for Lambda function communication, and using DynamoDB for managing text-to-speech data.\nContent 3.1. Create a DynamoDB table\n3.2. Create an Amazon S3 bucket\n3.3. Create an SNS topic\n"
},
{
	"uri": "http://HuuDung113.github.io/4-deploylambda/",
	"title": "Deploy lambda",
	"tags": [],
	"description": "",
	"content": "In this section, we will create Lambda functions on AWS to process new posts and convert them to speech through the Text-to-Speech service. These Lambda functions will take care of different functions in the pipeline, from receiving inputs, storing data into DynamoDB, to sending notifications via SNS to trigger further processing steps.\nUsing functions in Lambda helps divide tasks and optimize system performance, while also making it easier to expand and maintain in the future.\nContent: Create a new post Lambda function Create a convert to audio Lambda function Test the functions Create a Get Post Lambda Function "
},
{
	"uri": "http://HuuDung113.github.io/5-apigateway/5.1-expose-the-lambda-function-as-a-restful-web-service/",
	"title": "Expose Lambda Function as a RESTful Web Service",
	"tags": [],
	"description": "",
	"content": "1. Open AWS API Gateway Open the AWS Management Console. In the search bar, enter API Gateway and select the corresponding result. In the REST API section, select Build. In the Create REST API section, configure as follows: API type: REST API API name: PostReaderAPI Description: API for PostReader Application Endpoint Type: Regional Click Create API. Explanation:\nAPI Gateway is AWS\u0026rsquo;s managed service for creating, monitoring, and securing APIs. Regional: Deploy the API in a specific region to optimize performance for users in that area. Successfully created! ✅\n2. Create POST Method In the Resources pane, select the / icon. Select Create Method. Choose POST from the dropdown. In Lambda Function, enter PostReader_NewPost. Click Create method. Successfully created! ✅\nExplanation:\nPOST is an HTTP method used to send new data to the server. Here, when calling the API with the POST method, the PostReader_NewPost Lambda function will handle the request to add a new post to the DynamoDB database. Workflow:\nThe user sends a POST request with post data. API Gateway forwards the request to the Lambda function. Lambda processes and adds the data to DynamoDB. 3. Create GET Method In the Resources pane, select the / icon. Select Create Method. Choose GET from the dropdown. In Lambda Function, enter PostReader_GetPost. Click Create method. Explanation:\nGET is an HTTP method used to retrieve data from the server. The PostReader_GetPost Lambda function handles requests to return post information based on postId. Workflow:\nThe user sends a GET request with a postId parameter. API Gateway forwards the request to the Lambda function. Lambda queries DynamoDB and returns the post information. 4. Enable CORS (Cross-Origin Resource Sharing) In the Resources pane, select the / icon. Select Enable CORS. Choose the following options: Default 4XX and Default 5XX. Access-Control-Allow-Methods: GET, POST Click Save. Successfully created! ✅\nExplanation:\nCORS allows web applications from different domains to access the API. This is essential when your API is called from a website on a different domain. Example:\nThe website example.com can send requests to an API deployed at api.example.net. 5. Configure Query String Parameter for GET Select the GET method in the Resources pane. In Method Request, click Edit. Expand URL query string parameters. Click Add query string and enter: Name: postId Click Save. Explanation:\nQuery string parameters allow data to be passed via the URL. Here, postId is used to identify the post to retrieve. Example:\nhttps://api.example.com/dev/posts?postId=123 6. Configure Mapping Template Select the GET method. Select Integration Request. Click Edit under Mapping Templates. Click Add mapping template. Enter the following details: Content type: application/json Template body: { \u0026#34;postId\u0026#34; : \u0026#34;$input.params(\u0026#39;postId\u0026#39;)\u0026#34; } Click Save. Explanation:\nMapping Template converts data from query strings into JSON format. The PostReader_GetPost Lambda function requires data in JSON format, so the mapping template ensures the postId parameter is correctly formatted. How it works:\nThe postId from the URL is converted into JSON: { \u0026quot;postId\u0026quot;: \u0026quot;123\u0026quot; }. 7. Deploy API Select Deploy API. Choose New Stage. Enter the following details: Stage name: Dev Click Deploy. Copy the Invoke URL displayed after deployment. Explanation:\nDeploying applies the configurations and makes the API accessible to external users. The Dev stage indicates this is the development environment. Example:\nhttps://abc123.execute-api.us-east-1.amazonaws.com/Dev/posts 🎯 Expected Results: The API is now ready with GET and POST methods. Use the Invoke URL for testing or integrating into your application. Send POST requests to add posts or GET requests to retrieve post information. 🔍 Notes:\nDouble-check IAM permissions for Lambda functions. Use Postman or curl to test the API. 🎉 Congratulations! You have successfully deployed API Gateway to expose a Lambda function as a RESTful Web Service. 🚀\n"
},
{
	"uri": "http://HuuDung113.github.io/5-apigateway/",
	"title": "API Gateway Management",
	"tags": [],
	"description": "",
	"content": "🔍 Overview Amazon API Gateway is a fully managed service that makes it easy to create, publish, maintain, monitor, and secure APIs at any scale. It acts as a crucial bridge between your application and backend services like AWS Lambda, enabling end-users to interact with the application through a RESTful or WebSocket interface.\nIn this section, we will explore how to deploy and manage an API Gateway to connect with AWS Lambda for providing text-to-speech services with Amazon Polly. This guide covers the steps to configure the API, process user requests, and optimize performance.\n🌱 API Gateway\u0026rsquo;s Role in a TTS Application 🛠️ Communication Bridge: Receives text requests from users and forwards them to Lambda for processing. 🚦 Access Management: Provides authentication and authorization mechanisms like IAM, API Keys, and OAuth 2.0. ⚡ Performance Optimization: Supports caching to enhance response time and reduce backend load. 📈 Performance Monitoring: Integrates with Amazon CloudWatch to track traffic and performance. Contents: Expose Lambda Function as RESTful Web Service 🎯 Expected Outcomes By the end of this section, you will know how to:\nCreate and configure a REST API. Connect the API with AWS Lambda for request handling. Enable API Caching for improved response times. Manage security and monitor API activity. API Gateway is the key to making your serverless TTS application powerful, flexible, and easily scalable. 🚀\u0026quot;)}\n"
},
{
	"uri": "http://HuuDung113.github.io/6-s3-static-website/",
	"title": "Deploying a Static Website with Amazon S3",
	"tags": [],
	"description": "",
	"content": "1. Prepare the Necessary Files Download the following three files and save them to your computer:\nindex.html: Contains the structure and content of the website. scripts.js: Contains JavaScript code to connect with API Gateway. styles.css: Contains the styling rules for the interface. Note: Keep the file names and extensions unchanged.\nExplanation:\n📄 Download index.html 📜 Download scripts.js 🎨 Download styles.css 2. Modify the scripts.js File Open the scripts.js file in a text editor and update the first line:\nvar API_ENDPOINT = \u0026#34;https://xxxxx.execute-api.us-west-2.amazonaws.com/Dev\u0026#34;; Replace https://xxxxx... with the Invoke URL copied from API Gateway.\nExplanation:\nAPI_ENDPOINT: The API URL that JavaScript will connect to for text-to-speech functionality. Whenever API Gateway changes or is redeployed, this URL must be updated. 3. Create an Amazon S3 Bucket Open the AWS Management Console. Search for and select S3. Click Create bucket. Configure the settings as follows: Bucket name: www-yourbucketname (must be globally unique) Region: Choose the nearest region for optimal speed Object Ownership: Select ACLs enabled Block Public Access: Uncheck Block all public access Check I acknowledge\u0026hellip; to confirm the risks of making the bucket public\nClick Create bucket.\nExplanation:\nThe bucket is where website files will be stored. Public access must be enabled for the website to be publicly accessible. Note: AWS recommends not keeping buckets public unless necessary.\n4. Upload Files to S3 Open the newly created bucket. Click Upload. Upload the following files: index.html, scripts.js, styles.css.\nClick Upload and wait for the process to complete. Note: File names must be exact, including case sensitivity.\nExplanation:\nIf a file is missing or incorrectly named, the website may not display properly. ✅ Upload successful!\n5. Update Bucket Policy Go to the Permissions tab. Scroll down to Bucket Policy and click Edit. Paste the following policy: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;PublicReadGetObject\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;Action\u0026#34;: [\u0026#34;s3:GetObject\u0026#34;], \u0026#34;Resource\u0026#34;: [\u0026#34;arn:aws:s3:::www-yourbucketname/*\u0026#34;] } ] } Replace www-yourbucketname with your actual bucket name. Click Save changes. Explanation:\nThis allows public access to read files in the bucket. AWS uses ARN (Amazon Resource Name) to specify the exact bucket. Note: AWS may warn about public access risks. You can ignore this warning for a public website.\n6. Enable Website Hosting Go to the Properties tab. Scroll down to Static website hosting.\nClick Edit and configure: Enable website hosting. Index document: index.html Error document: index.html (used for error handling as well)\nClick Save changes.\nCopy the Endpoint URL displayed after saving. Explanation:\nEnabling this feature turns S3 into a static web server. The Endpoint URL is the website’s public address. 7. Verify the Deployment Open a web browser. Paste the copied Endpoint URL.\nEnter text and click Say it. Wait for the application to convert the text to speech. Expected Results:\nThe website displays a text input interface. Clicking Say it plays the converted speech. If an error occurs, check the browser console and API Gateway configuration. 🎉 Congratulations! 🚀\nThis is the complete English translation of your document. Let me know if you need any modifications! 😊\n"
},
{
	"uri": "http://HuuDung113.github.io/",
	"title": "Building a Serverless Text-to-Speech Application with Amazon Polly",
	"tags": [],
	"description": "",
	"content": "🗣️ Build AI Voice Text Reading App Using Amazon Polly 🔍 Overview In this workshop, you’ll dive into the basics and hands-on steps of building a Text-to-Speech (TTS) application using Amazon Polly with a serverless architecture. You’ll practice connecting and managing AWS services, allowing you to create highly scalable applications without worrying about infrastructure management.\n📚 Workshop Contents Introduction - Understanding TTS and Amazon Polly. Prerequisites - Setting up your AWS environment for the project. Integrating Amazon Polly - Connecting your app with Polly for speech synthesis. Deploying on AWS Lambda - Deploying the serverless function that handles the text-to-speech processing. Managing API Gateway - Configuring and exposing your Lambda function as a RESTful API. Deploy Static Website with Amazon S3 - Configure and deploy static website. Conclusion and development direction Cleaning Up Resources - Properly cleaning up resources to avoid unnecessary costs. Why This Workshop Is Exciting: 🚀 Real-World Application: Learn how to build a powerful application that converts text into natural-sounding speech! 🌐 Serverless Architecture: Explore how to build scalable and cost-effective applications using AWS services. 🧑‍💻 Hands-On Experience: Step-by-step instructions to integrate and deploy services on AWS Lambda and API Gateway. Get ready to enhance your skills and build something amazing with Amazon Polly! Let\u0026rsquo;s start transforming text into speech! 🎤\n"
},
{
	"uri": "http://HuuDung113.github.io/7-conclution/",
	"title": "Conclusion and Future Development Directions",
	"tags": [],
	"description": "",
	"content": "🎯 Conclusion and Future Development 🔍 Summary In this workshop, we explored and practiced building a Serverless Text-to-Speech (TTS) Application using Amazon Polly. From setting up the environment, integrating AWS services such as Lambda and API Gateway, to managing and cleaning up resources, you have gone through the entire process of developing a modern and efficient TTS application.\n🚀 What You Have Achieved Deep Understanding of Amazon Polly: Mastering how this text-to-speech service works and its benefits. Serverless Architecture Deployment Skills: Using AWS Lambda and API Gateway to build a flexible, scalable application. Hands-on Experience: Practicing each step from development, deployment, to application management on AWS. 🔄 Application Workflow Below is an overview of how the TTS application works:\nUser sends a text-to-speech conversion request through the application interface. API Gateway receives the request and forwards it to AWS Lambda. Lambda Function processes the request and calls Amazon Polly to convert the text into speech. Amazon Polly returns the converted audio file. Lambda Function stores the audio file in Amazon S3 and provides a URL to the user. User receives the link and listens to the audio file directly from S3. 🌟 Future Development Directions To enhance and expand the application:\nSupport for Multiple Languages and Voices: Integrate additional languages and voice options to serve a diverse user base. Amazon Polly continuously updates new voices, including generative AI-based expressive voices.\nAdvanced Voice Customization: Utilize Speech Synthesis Markup Language (SSML) to adjust tone, speed, and emotions, creating a richer user experience.\nIntegration with Other AI Services: Combine with Amazon Transcribe to convert speech into text, enabling bidirectional speech-text conversion.\nMobile Application Development: Use AWS Amplify to build a mobile-friendly application, allowing users to access the service anytime, anywhere.\nCost and Performance Optimization: Leverage AWS CloudWatch and AWS Lambda Power Tuning to monitor and optimize application performance, ensuring smooth operation at minimal cost.\nThank you for participating in this workshop! We hope that the knowledge and skills you have gained will be valuable for your application development journey. Wishing you success, and see you in future programs! 🎉\n"
},
{
	"uri": "http://HuuDung113.github.io/8-cleanup/",
	"title": "Resource Cleanup",
	"tags": [],
	"description": "",
	"content": "🧹 Cleaning Up AWS Resources After completing the workshop, make sure to delete all resources to avoid unnecessary costs.\nDelete AWS Lambda Open AWS Console → Go to AWS Lambda.\nSelect the Lambda function you created.\nClick Actions → Delete → Confirm deletion.\nDelete API Gateway Open AWS Console → Go to API Gateway.\nSelect the created API.\nClick Delete API → Confirm deletion.\nDelete Amazon S3 Bucket Open AWS Console → Go to Amazon S3.\nSelect the created bucket.\nDelete all files inside.\nClick Delete bucket → Confirm deletion.\nDelete CloudWatch Logs Open AWS Console → Go to CloudWatch.\nSelect the related Log groups.\nClick Actions → Delete log group → Confirm deletion.\n✅ Cleanup Complete! You have successfully removed all AWS resources related to this workshop. 🎉\n"
},
{
	"uri": "http://HuuDung113.github.io/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://HuuDung113.github.io/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]