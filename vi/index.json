[
{
	"uri": "http://HuuDung113.github.io/vi/3-integratepolly/3.1-create-a-dynamodb-table/",
	"title": "T·∫°o b·∫£ng DynamoDB",
	"tags": [],
	"description": "",
	"content": "Content:\nT·∫°o b·∫£ng DynamoDB. C·∫•u h√¨nh c√°c tr∆∞·ªùng c·∫ßn thi·∫øt. T·∫°o b·∫£ng DynamoDB Task 1: Create a DynamoDB table\nTruy c·∫≠p Amazon DynamoDB Console v√† ch·ªçn Create table. Nh·∫≠p c√°c th√¥ng tin sau: Table name: posts Partition key: id (String) Ch·ªçn Default settings v√† nh·∫•n Create table. B·∫£ng posts s·∫Ω l∆∞u tr·ªØ c√°c th√¥ng tin sau:\nid: ID c·ªßa b√†i vi·∫øt. status: Tr·∫°ng th√°i c·ªßa b√†i vi·∫øt (UPDATED ho·∫∑c PROCESSING). text: N·ªôi dung vƒÉn b·∫£n c·ªßa b√†i vi·∫øt. voice: Gi·ªçng n√≥i ƒë∆∞·ª£c s·ª≠ d·ª•ng t·ª´ Amazon Polly. url: ƒê∆∞·ªùng d·∫´n ƒë·∫øn t·ªáp √¢m thanh MP3 ƒë∆∞·ª£c l∆∞u tr·ªØ trong S3. Sau khi t·∫°o b·∫£ng th√†nh c√¥ng, b·∫°n c√≥ th·ªÉ ti·∫øp t·ª•c v·ªõi c√°c b∆∞·ªõc ti·∫øp theo trong tri·ªÉn khai ·ª©ng d·ª•ng.\n"
},
{
	"uri": "http://HuuDung113.github.io/vi/4-deploylambda/4.1-create-a-new-post-lambda-function/",
	"title": "T·∫°o Lambda Function X·ª≠ L√Ω B√†i Vi·∫øt M·ªõi",
	"tags": [],
	"description": "",
	"content": "Trong b∆∞·ªõc n√†y, ch√∫ng ta s·∫Ω t·∫°o m·ªôt AWS Lambda function m·ªõi ƒë·ªÉ x·ª≠ l√Ω c√°c b√†i vi·∫øt cho vi·ªác chuy·ªÉn ƒë·ªïi vƒÉn b·∫£n th√†nh gi·ªçng n√≥i.\nC√°c b∆∞·ªõc t·∫°o Lambda Function M·ªü AWS Management Console v√† t√¨m ki·∫øm Lambda. Ch·ªçn Create function. Ch·ªçn Author from scratch v√† c·∫•u h√¨nh nh∆∞ sau: Function name: PostReader_NewPost Runtime: Python 3.12 Execution role: S·ª≠ d·ª•ng role c√≥ s·∫µn Existing role: Lab-Lambda-Role Ch·ªçn Create function. T·∫°o th√†ng c√¥ng!\nM√£ ngu·ªìn Lambda Function import boto3 import os import uuid def lambda_handler(event, context): # T·∫°o ID duy nh·∫•t cho b√†i vi·∫øt m·ªõi recordId = str(uuid.uuid4()) voice = event[\u0026#34;voice\u0026#34;] text = event[\u0026#34;text\u0026#34;] print(f\u0026#39;T·∫°o b·∫£n ghi DynamoDB m·ªõi v·ªõi ID: {recordId}\u0026#39;) print(f\u0026#39;N·ªôi dung b√†i vi·∫øt: {text}\u0026#39;) print(f\u0026#39;Gi·ªçng ƒë·ªçc ƒë∆∞·ª£c ch·ªçn: {voice}\u0026#39;) # L∆∞u d·ªØ li·ªáu v√†o DynamoDB dynamodb = boto3.resource(\u0026#39;dynamodb\u0026#39;) table = dynamodb.Table(os.environ[\u0026#39;DB_TABLE_NAME\u0026#39;]) table.put_item( Item={ \u0026#39;id\u0026#39;: recordId, \u0026#39;text\u0026#39;: text, \u0026#39;voice\u0026#39;: voice, \u0026#39;status\u0026#39;: \u0026#39;PROCESSING\u0026#39; } ) # G·ª≠i th√¥ng b√°o ƒë·∫øn SNS client = boto3.client(\u0026#39;sns\u0026#39;) client.publish( TopicArn=os.environ[\u0026#39;SNS_TOPIC\u0026#39;], Message=recordId ) return recordId Gi·∫£i th√≠ch m√£ ngu·ªìn Import th∆∞ vi·ªán import boto3 import os import uuid boto3: AWS SDK ƒë·ªÉ t∆∞∆°ng t√°c v·ªõi c√°c d·ªãch v·ª• AWS. os: Truy c·∫≠p c√°c bi·∫øn m√¥i tr∆∞·ªùng. uuid: T·∫°o ID duy nh·∫•t. T·∫°o ID cho b√†i vi·∫øt recordId = str(uuid.uuid4()) T·∫°o ID duy nh·∫•t cho m·ªói b√†i vi·∫øt b·∫±ng c√°ch s·ª≠ d·ª•ng uuid.uuid4(). Tr√≠ch xu·∫•t tham s·ªë ƒë·∫ßu v√†o voice = event[\u0026#34;voice\u0026#34;] text = event[\u0026#34;text\u0026#34;] H√†m nh·∫≠n hai tham s·ªë voice (gi·ªçng ƒë·ªçc) v√† text (n·ªôi dung b√†i vi·∫øt). In th√¥ng tin ra log print(f\u0026#39;T·∫°o b·∫£n ghi DynamoDB m·ªõi v·ªõi ID: {recordId}\u0026#39;) print(f\u0026#39;N·ªôi dung b√†i vi·∫øt: {text}\u0026#39;) print(f\u0026#39;Gi·ªçng ƒë·ªçc ƒë∆∞·ª£c ch·ªçn: {voice}\u0026#39;) In c√°c th√¥ng tin c·∫ßn thi·∫øt l√™n CloudWatch ƒë·ªÉ h·ªó tr·ª£ g·ª° l·ªói. L∆∞u d·ªØ li·ªáu v√†o DynamoDB dynamodb = boto3.resource(\u0026#39;dynamodb\u0026#39;) table = dynamodb.Table(os.environ[\u0026#39;DB_TABLE_NAME\u0026#39;]) table.put_item( Item={ \u0026#39;id\u0026#39;: recordId, \u0026#39;text\u0026#39;: text, \u0026#39;voice\u0026#39;: voice, \u0026#39;status\u0026#39;: \u0026#39;PROCESSING\u0026#39; } ) S·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c put_item() ƒë·ªÉ th√™m m·ªôt b·∫£n ghi m·ªõi v·ªõi c√°c tr∆∞·ªùng: id, text, voice, v√† status. G·ª≠i th√¥ng b√°o ƒë·∫øn SNS client = boto3.client(\u0026#39;sns\u0026#39;) client.publish( TopicArn=os.environ[\u0026#39;SNS_TOPIC\u0026#39;], Message=recordId ) G·ª≠i th√¥ng b√°o t·ªõi SNS v·ªõi th√¥ng ƒëi·ªáp l√† recordId. Tr·∫£ v·ªÅ ID b√†i vi·∫øt return recordId Tr·∫£ v·ªÅ ID ƒë·ªÉ s·ª≠ d·ª•ng cho c√°c b∆∞·ªõc ti·∫øp theo. C·∫•u h√¨nh bi·∫øn m√¥i tr∆∞·ªùng M·ªü tab Configuration trong giao di·ªán Lambda. Ch·ªçn Environment variables \u0026gt; Edit \u0026gt; Add environment variable. Key: SNS_TOPIC\nValue: \u0026lt;D√°n ARN c·ªßa SNS Topic\u0026gt; Key: DB_TABLE_NAME\nValue: posts L∆∞u c√°c thay ƒë·ªïi. C·∫≠p nh·∫≠t th·ªùi gian ch·ªù V√†o General configuration \u0026gt; Edit. ƒê·∫∑t Timeout th√†nh 10 gi√¢y. L∆∞u c√°c thay ƒë·ªïi. Ki·ªÉm th·ª≠ Lambda Function M·ªü tab Test. T·∫°o m·ªôt test event m·ªõi v·ªõi t√™n Joanna v√† n·ªôi dung sau: { \u0026#34;voice\u0026#34;: \u0026#34;Joanna\u0026#34;, \u0026#34;text\u0026#34;: \u0026#34;D·ªãch m√£ ngu·ªìn th√†nh c√¥ng!\u0026#34; } L∆∞u event. Ch·ªçn Test. K·∫øt qu·∫£ mong ƒë·ª£i:\nExecution result: succeeded Log output: Hi·ªÉn th·ªã recordId v√† c√°c th√¥ng tin ƒë·∫ßu v√†o. Lambda function ƒë√£ s·∫µn s√†ng ƒë·ªÉ x·ª≠ l√Ω b√†i vi·∫øt v√† k√≠ch ho·∫°t qu√° tr√¨nh chuy·ªÉn ƒë·ªïi vƒÉn b·∫£n th√†nh gi·ªçng n√≥i.\n"
},
{
	"uri": "http://HuuDung113.github.io/vi/",
	"title": "X√¢y d·ª±ng ·ª®ng D·ª•ng Chuy·ªÉn VƒÉn B·∫£n Th√†nh Gi·ªçng N√≥i Kh√¥ng M√°y Ch·ªß v·ªõi Amazon Polly",
	"tags": [],
	"description": "",
	"content": "üó£Ô∏è X√¢y d·ª±ng ·ª©ng d·ª•ng ƒë·ªçc vƒÉn b·∫£n b·∫±ng gi·ªçng n√≥i AI b·∫±ng Amazon Polly üîç T·ªïng Quan Trong workshop n√†y, b·∫°n s·∫Ω t√¨m hi·ªÉu c√°c b∆∞·ªõc c∆° b·∫£n v√† th·ª±c h√†nh x√¢y d·ª±ng m·ªôt ·ª©ng d·ª•ng Chuy·ªÉn VƒÉn B·∫£n Th√†nh Gi·ªçng N√≥i (TTS) s·ª≠ d·ª•ng Amazon Polly v·ªõi ki·∫øn tr√∫c kh√¥ng m√°y ch·ªß. B·∫°n s·∫Ω th·ª±c h√†nh k·∫øt n·ªëi v√† qu·∫£n l√Ω c√°c d·ªãch v·ª• AWS, gi√∫p t·∫°o ra c√°c ·ª©ng d·ª•ng c√≥ th·ªÉ m·ªü r·ªông m√† kh√¥ng c·∫ßn lo l·∫Øng v·ªÅ vi·ªác qu·∫£n l√Ω h·∫° t·∫ßng.\nüìö N·ªôi Dung Workshop Gi·ªõi Thi·ªáu - T√¨m hi·ªÉu v·ªÅ TTS v√† Amazon Polly. Y√™u C·∫ßu Chu·∫©n B·ªã - Thi·∫øt l·∫≠p m√¥i tr∆∞·ªùng AWS cho d·ª± √°n. T√≠ch H·ª£p Amazon Polly - K·∫øt n·ªëi ·ª©ng d·ª•ng c·ªßa b·∫°n v·ªõi Polly ƒë·ªÉ t·ªïng h·ª£p gi·ªçng n√≥i. Tri·ªÉn Khai Tr√™n AWS Lambda - Tri·ªÉn khai ch·ª©c nƒÉng kh√¥ng m√°y ch·ªß x·ª≠ l√Ω chuy·ªÉn vƒÉn b·∫£n th√†nh gi·ªçng n√≥i. Qu·∫£n L√Ω API Gateway - C·∫•u h√¨nh v√† t·∫°o API RESTful cho Lambda. Tri·ªÉn khai Website Tƒ©nh v·ªõi Amazon S3 - C·∫•u h√¨nh v√† tri·ªÉn khai web tƒ©nh. K·∫øt lu·∫≠n v√† h∆∞·ªõng ph√°t tri·ªÉn D·ªçn D·∫πp T√†i Nguy√™n - X·ª≠ l√Ω t√†i nguy√™n sau khi ho√†n th√†nh ƒë·ªÉ tr√°nh ph√≠ kh√¥ng c·∫ßn thi·∫øt. T·∫°i Sao Workshop N√†y Th√∫ V·ªã: üöÄ ·ª®ng D·ª•ng Th·ª±c T·∫ø: H·ªçc c√°ch x√¢y d·ª±ng m·ªôt ·ª©ng d·ª•ng m·∫°nh m·∫Ω chuy·ªÉn vƒÉn b·∫£n th√†nh gi·ªçng n√≥i t·ª± nhi√™n! üåê Ki·∫øn Tr√∫c Kh√¥ng M√°y Ch·ªß: Kh√°m ph√° c√°ch x√¢y d·ª±ng ·ª©ng d·ª•ng c√≥ th·ªÉ m·ªü r·ªông v√† ti·∫øt ki·ªám chi ph√≠ v·ªõi c√°c d·ªãch v·ª• AWS. üßë‚Äçüíª Tr·∫£i Nghi·ªám Th·ª±c T·∫ø: H∆∞·ªõng d·∫´n chi ti·∫øt t·ª´ng b∆∞·ªõc ƒë·ªÉ t√≠ch h·ª£p v√† tri·ªÉn khai c√°c d·ªãch v·ª• tr√™n AWS Lambda v√† API Gateway. H√£y s·∫µn s√†ng n√¢ng cao k·ªπ nƒÉng v√† x√¢y d·ª±ng nh·ªØng ·ª©ng d·ª•ng tuy·ªát v·ªùi v·ªõi Amazon Polly! C√πng b·∫Øt ƒë·∫ßu chuy·ªÉn h√≥a vƒÉn b·∫£n th√†nh gi·ªçng n√≥i ngay th√¥i! üé§\n"
},
{
	"uri": "http://HuuDung113.github.io/vi/1-introduce/",
	"title": "Gi·ªõi Thi·ªáu",
	"tags": [],
	"description": "",
	"content": "Gi·ªõi Thi·ªáu Trong c√°c ·ª©ng d·ª•ng hi·ªán ƒë·∫°i, c√¥ng ngh·ªá Chuy·ªÉn VƒÉn B·∫£n Th√†nh Gi·ªçng N√≥i (TTS) ƒë√≥ng vai tr√≤ quan tr·ªçng trong vi·ªác n√¢ng cao kh·∫£ nƒÉng ti·∫øp c·∫≠n, c·∫£i thi·ªán tr·∫£i nghi·ªám ng∆∞·ªùi d√πng v√† t·ª± ƒë·ªông h√≥a vi·ªác cung c·∫•p n·ªôi dung. Amazon Polly l√† m·ªôt d·ªãch v·ª• AWS s·ª≠ d·ª•ng h·ªçc s√¢u ƒë·ªÉ chuy·ªÉn vƒÉn b·∫£n th√†nh gi·ªçng n√≥i t·ª± nhi√™n, gi√∫p c√°c nh√† ph√°t tri·ªÉn t·∫°o ra c√°c ·ª©ng d·ª•ng t∆∞∆°ng t√°c v·ªõi ng∆∞·ªùi d√πng theo c√°ch sinh ƒë·ªông v√† t·ª± nhi√™n h∆°n.\nL·ª£i √≠ch khi s·ª≠ d·ª•ng Amazon Polly: üó£Ô∏è Gi·ªçng n√≥i ch·∫•t l∆∞·ª£ng cao, t·ª± nhi√™n: H·ªó tr·ª£ nhi·ªÅu ng√¥n ng·ªØ v√† t√πy ch·ªçn gi·ªçng n√≥i v·ªõi √¢m thanh ch√¢n th·ª±c. üåê Ki·∫øn tr√∫c kh√¥ng m√°y ch·ªß v√† kh·∫£ nƒÉng m·ªü r·ªông: D·ªÖ d√†ng x√¢y d·ª±ng gi·∫£i ph√°p TTS m√† kh√¥ng c·∫ßn qu·∫£n l√Ω h·∫° t·∫ßng. üîó T√≠ch h·ª£p li·ªÅn m·∫°ch v·ªõi AWS: Polly d·ªÖ d√†ng k·∫øt h·ª£p v·ªõi S3, DynamoDB, Lambda, gi√∫p t·ª± ƒë·ªông h√≥a quy tr√¨nh l√†m vi·ªác. üí∞ Gi·∫£i ph√°p ti·∫øt ki·ªám chi ph√≠: Thanh to√°n theo m·ª©c s·ª≠ d·ª•ng, ch·ªâ t√≠nh ph√≠ cho ph·∫ßn vƒÉn b·∫£n ƒë∆∞·ª£c chuy·ªÉn th√†nh gi·ªçng n√≥i. ‚è±Ô∏è H·ªó tr·ª£ x·ª≠ l√Ω th·ªùi gian th·ª±c v√† theo l√¥: Cung c·∫•p c√°c t√πy ch·ªçn cho c·∫£ t·ªïng h·ª£p gi·ªçng n√≥i tr·ª±c ti·∫øp v√† chuy·ªÉn ƒë·ªïi h√†ng lo·∫°t. üì± H·ªó tr·ª£ ƒëa n·ªÅn t·∫£ng: √Çm thanh Polly c√≥ th·ªÉ s·ª≠ d·ª•ng tr√™n web, di ƒë·ªông, IoT v√† c√°c thi·∫øt b·ªã h·ªó tr·ª£. Ki·∫øn Tr√∫c Kh√¥ng M√°y Ch·ªß Cho ·ª®ng D·ª•ng TTS Ki·∫øn tr√∫c kh√¥ng m√°y ch·ªß gi√∫p ƒë∆°n gi·∫£n h√≥a vi·ªác tri·ªÉn khai v√† b·∫£o tr√¨. D∆∞·ªõi ƒë√¢y l√† m√¥ h√¨nh ƒëi·ªÉn h√¨nh cho m·ªôt ·ª©ng d·ª•ng Chuy·ªÉn VƒÉn B·∫£n Th√†nh Gi·ªçng N√≥i:\nAWS Lambda: X·ª≠ l√Ω logic backend, g·ªçi Polly ƒë·ªÉ t·ªïng h·ª£p gi·ªçng n√≥i. API Gateway: Cung c·∫•p c√°c endpoint RESTful ƒë·ªÉ nh·∫≠n vƒÉn b·∫£n t·ª´ ng∆∞·ªùi d√πng. Amazon Polly: Chuy·ªÉn vƒÉn b·∫£n th√†nh gi·ªçng n√≥i v√† tr·∫£ v·ªÅ file √¢m thanh. Amazon S3: L∆∞u tr·ªØ c√°c file √¢m thanh ƒë·ªÉ ph√°t l·∫°i sau. CloudFront (T√πy ch·ªçn): H·ªó tr·ª£ ph√¢n ph·ªëi n·ªôi dung nhanh ch√≥ng v√† to√†n c·∫ßu nh·ªù caching. üìå C√°ch ho·∫°t ƒë·ªông c·ªßa h·ªá th·ªëng H·ªá th·ªëng g·ªìm 8 b∆∞·ªõc, ƒë∆∞·ª£c ƒë√°nh s·ªë trong s∆° ƒë·ªì:\n1Ô∏è‚É£ Ng∆∞·ªùi d√πng truy c·∫≠p website tƒ©nh tr√™n Amazon S3 Website tƒ©nh ƒë∆∞·ª£c l∆∞u tr√™n Amazon S3. Khi ng∆∞·ªùi d√πng g·ª≠i y√™u c·∫ßu (v√≠ d·ª•: nh·∫≠p vƒÉn b·∫£n c·∫ßn chuy·ªÉn ƒë·ªïi th√†nh gi·ªçng n√≥i), website g·ª≠i y√™u c·∫ßu ƒë·∫øn API Gateway. 2Ô∏è‚É£ API Gateway nh·∫≠n y√™u c·∫ßu v√† chuy·ªÉn ƒë·∫øn AWS Lambda API Gateway ƒë√≥ng vai tr√≤ nh∆∞ m·ªôt ƒëi·ªÉm trung gian, chuy·ªÉn y√™u c·∫ßu t·ª´ frontend (tr√¨nh duy·ªát ng∆∞·ªùi d√πng) ƒë·∫øn m·ªôt AWS Lambda function (Get/Post request). 3Ô∏è‚É£ Lambda x·ª≠ l√Ω y√™u c·∫ßu v√† ghi v√†o Amazon DynamoDB Lambda function th·ª±c hi·ªán x√°c th·ª±c v√† l∆∞u tr·ªØ d·ªØ li·ªáu b√†i vi·∫øt/vƒÉn b·∫£n v√†o Amazon DynamoDB ƒë·ªÉ qu·∫£n l√Ω th√¥ng tin. 4Ô∏è‚É£ G·ª≠i th√¥ng b√°o qua Amazon SNS Khi c√≥ b√†i vi·∫øt/vƒÉn b·∫£n m·ªõi, h·ªá th·ªëng s·ª≠ d·ª•ng Amazon SNS (Simple Notification Service) ƒë·ªÉ th√¥ng b√°o v·ªÅ s·ª± ki·ªán n√†y. 5Ô∏è‚É£ Lambda k√≠ch ho·∫°t Amazon Polly ƒë·ªÉ chuy·ªÉn ƒë·ªïi vƒÉn b·∫£n th√†nh gi·ªçng n√≥i Khi nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o t·ª´ SNS, Lambda function (Convert to Audio) g·ªçi Amazon Polly ƒë·ªÉ t·∫°o file √¢m thanh (MP3) t·ª´ n·ªôi dung vƒÉn b·∫£n. 6Ô∏è‚É£ Amazon Polly x·ª≠ l√Ω y√™u c·∫ßu Amazon Polly t·∫°o file √¢m thanh MP3 t·ª´ vƒÉn b·∫£n ƒë√£ nh·∫≠p. 7Ô∏è‚É£ File √¢m thanh ƒë∆∞·ª£c l∆∞u v√†o Amazon S3 Sau khi Polly t·∫°o file MP3, Lambda function l∆∞u tr·ªØ file n√†y v√†o m·ªôt Amazon S3 Bucket ri√™ng ƒë·ªÉ l∆∞u tr·ªØ n·ªôi dung √¢m thanh. 8Ô∏è‚É£ C·∫≠p nh·∫≠t tr·∫°ng th√°i trong DynamoDB Sau khi file MP3 ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng, DynamoDB ƒë∆∞·ª£c c·∫≠p nh·∫≠t ƒë·ªÉ ƒë√°nh d·∫•u r·∫±ng b√†i vi·∫øt ƒë√£ c√≥ file √¢m thanh. Ng∆∞·ªùi d√πng c√≥ th·ªÉ t·∫£i xu·ªëng ho·∫∑c nghe tr·ª±c ti·∫øp t·ª´ website. ·ª®ng D·ª•ng Th·ª±c T·∫ø Amazon Polly ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng r·ªông r√£i trong c√°c lƒ©nh v·ª±c nh∆∞:\nTr·ª£ L√Ω ·∫¢o \u0026amp; Chatbot: N√¢ng cao tr·∫£i nghi·ªám ng∆∞·ªùi d√πng trong c√°c ·ª©ng d·ª•ng chƒÉm s√≥c kh√°ch h√†ng. E-learning \u0026amp; S√°ch N√≥i: Gi√∫p chuy·ªÉn n·ªôi dung h·ªçc t·∫≠p th√†nh √¢m thanh ƒë·ªÉ d·ªÖ d√†ng ti·∫øp c·∫≠n h∆°n. Thuy·∫øt Minh N·ªôi Dung: T·∫°o gi·ªçng ƒë·ªçc t·ª± ƒë·ªông cho tin t·ª©c, blog, video. C√¥ng Ngh·ªá H·ªó Tr·ª£: H·ªó tr·ª£ ng∆∞·ªùi khi·∫øm th·ªã qua c√°c tr√¨nh ƒë·ªçc m√†n h√¨nh. B·∫±ng c√°ch t·∫≠n d·ª•ng Amazon Polly, c√°c nh√† ph√°t tri·ªÉn c√≥ th·ªÉ t·∫°o ra c√°c ·ª©ng d·ª•ng Chuy·ªÉn VƒÉn B·∫£n Th√†nh Gi·ªçng N√≥i m·∫°nh m·∫Ω v√† linh ho·∫°t, mang l·∫°i tr·∫£i nghi·ªám t·ª± nhi√™n v√† sinh ƒë·ªông cho ng∆∞·ªùi d√πng tr√™n nhi·ªÅu n·ªÅn t·∫£ng.\n"
},
{
	"uri": "http://HuuDung113.github.io/vi/4-deploylambda/4.2-create-a-convert-to-audio-lambda-function/",
	"title": "T·∫°o h√†m Lambda Chuy·ªÉn ƒë·ªïi th√†nh √¢m thanh",
	"tags": [],
	"description": "",
	"content": "1. Create the Lambda Function M·ªü AWS Management Console. ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn Lambda \u0026gt; Functions. Ch·ªçn Create function. Ch·ªçn Author from scratch v√† c·∫•u h√¨nh nh∆∞ sau: Function name: ConvertToAudio Runtime: Python 3.12 M·ªü r·ªông ph·∫ßn: Change default execution role Execution role: Ch·ªçn Use an existing role. Existing role: Lab-Lambda-Role Nh·∫•n Create function. T·∫°o function th√†nh c√¥ng !\n2. Th√™m M√£ Code X√≥a m√£ m·∫∑c ƒë·ªãnh v√† th√™m ƒëo·∫°n code sau:\nimport boto3 import os from contextlib import closing from boto3.dynamodb.conditions import Key def lambda_handler(event, context): postId = event[\u0026#34;Records\u0026#34;][0][\u0026#34;Sns\u0026#34;][\u0026#34;Message\u0026#34;] print(\u0026#34;Text to Speech function. Post ID in DynamoDB: \u0026#34; + postId) # Truy v·∫•n b√†i vi·∫øt t·ª´ DynamoDB dynamodb = boto3.resource(\u0026#39;dynamodb\u0026#39;) table = dynamodb.Table(os.environ[\u0026#39;DB_TABLE_NAME\u0026#39;]) postItem = table.query(KeyConditionExpression=Key(\u0026#39;id\u0026#39;).eq(postId)) text = postItem[\u0026#34;Items\u0026#34;][0][\u0026#34;text\u0026#34;] voice = postItem[\u0026#34;Items\u0026#34;][0][\u0026#34;voice\u0026#34;] rest = text # Chia text th√†nh c√°c kh·ªëi nh·ªè h∆°n 2600 k√Ω t·ª± textBlocks = [] while len(rest) \u0026gt; 2600: end = rest.find(\u0026#34;.\u0026#34;, 2500) if end == -1: end = rest.find(\u0026#34; \u0026#34;, 2500) textBlocks.append(rest[:end]) rest = rest[end:] textBlocks.append(rest) # Chuy·ªÉn ƒë·ªïi vƒÉn b·∫£n th√†nh gi·ªçng n√≥i v·ªõi Polly polly = boto3.client(\u0026#39;polly\u0026#39;) for textBlock in textBlocks: response = polly.synthesize_speech( OutputFormat=\u0026#39;mp3\u0026#39;, Text=textBlock, VoiceId=voice ) if \u0026#34;AudioStream\u0026#34; in response: with closing(response[\u0026#34;AudioStream\u0026#34;]) as stream: output = os.path.join(\u0026#34;/tmp/\u0026#34;, postId) with open(output, \u0026#34;ab\u0026#34; if os.path.isfile(output) else \u0026#34;wb\u0026#34;) as file: file.write(stream.read()) # T·∫£i file MP3 l√™n S3 s3 = boto3.client(\u0026#39;s3\u0026#39;) s3.upload_file(f\u0026#39;/tmp/{postId}\u0026#39;, os.environ[\u0026#39;BUCKET_NAME\u0026#39;], f\u0026#39;{postId}.mp3\u0026#39;) s3.put_object_acl(ACL=\u0026#39;public-read\u0026#39;, Bucket=os.environ[\u0026#39;BUCKET_NAME\u0026#39;], Key=f\u0026#39;{postId}.mp3\u0026#39;) # T·∫°o URL cho file audio location = s3.get_bucket_location(Bucket=os.environ[\u0026#39;BUCKET_NAME\u0026#39;]) region = location[\u0026#39;LocationConstraint\u0026#39;] url = f\u0026#34;https://s3-{region}.amazonaws.com/{os.environ[\u0026#39;BUCKET_NAME\u0026#39;]}/{postId}.mp3\u0026#34; if region else f\u0026#34;https://s3.amazonaws.com/{os.environ[\u0026#39;BUCKET_NAME\u0026#39;]}/{postId}.mp3\u0026#34; # C·∫≠p nh·∫≠t tr·∫°ng th√°i v√† URL trong DynamoDB table.update_item( Key={\u0026#39;id\u0026#39;: postId}, UpdateExpression=\u0026#34;SET #status = :s, #url = :u\u0026#34;, ExpressionAttributeNames={\u0026#39;#status\u0026#39;: \u0026#39;status\u0026#39;, \u0026#39;#url\u0026#39;: \u0026#39;url\u0026#39;}, ExpressionAttributeValues={\u0026#39;:s\u0026#39;: \u0026#39;UPDATED\u0026#39;, \u0026#39;:u\u0026#39;: url} ) return { \u0026#34;statusCode\u0026#34;: 200, \u0026#34;body\u0026#34;: f\u0026#34;Audio file created for post {postId}\u0026#34; } Gi·∫£i th√≠ch m√£ ngu·ªìn Import th∆∞ vi·ªán import boto3 import os import uuid boto3: AWS SDK ƒë·ªÉ t∆∞∆°ng t√°c v·ªõi c√°c d·ªãch v·ª• AWS. os: Truy c·∫≠p c√°c bi·∫øn m√¥i tr∆∞·ªùng. uuid: T·∫°o ID duy nh·∫•t. T·∫°o ID cho b√†i vi·∫øt recordId = str(uuid.uuid4()) M·ª•c ƒë√≠ch: T·∫°o ID duy nh·∫•t cho m·ªói b√†i vi·∫øt. Gi·∫£i th√≠ch: S·ª≠ d·ª•ng uuid.uuid4() ƒë·ªÉ sinh ID kh√¥ng tr√πng l·∫∑p. Tr√≠ch xu·∫•t tham s·ªë ƒë·∫ßu v√†o voice = event[\u0026#34;voice\u0026#34;] text = event[\u0026#34;text\u0026#34;] voice: Gi·ªçng ƒë·ªçc c·∫ßn s·ª≠ d·ª•ng. text: N·ªôi dung vƒÉn b·∫£n c·∫ßn chuy·ªÉn ƒë·ªïi. In th√¥ng tin ra log print(f\u0026#39;T·∫°o b·∫£n ghi DynamoDB m·ªõi v·ªõi ID: {recordId}\u0026#39;) print(f\u0026#39;N·ªôi dung b√†i vi·∫øt: {text}\u0026#39;) print(f\u0026#39;Gi·ªçng ƒë·ªçc ƒë∆∞·ª£c ch·ªçn: {voice}\u0026#39;) M·ª•c ƒë√≠ch: H·ªó tr·ª£ g·ª° l·ªói b·∫±ng c√°ch ghi log th√¥ng tin c·∫ßn thi·∫øt. L∆∞u d·ªØ li·ªáu v√†o DynamoDB dynamodb = boto3.resource(\u0026#39;dynamodb\u0026#39;) table = dynamodb.Table(os.environ[\u0026#39;DB_TABLE_NAME\u0026#39;]) table.put_item( Item={ \u0026#39;id\u0026#39;: recordId, \u0026#39;text\u0026#39;: text, \u0026#39;voice\u0026#39;: voice, \u0026#39;status\u0026#39;: \u0026#39;PROCESSING\u0026#39; } ) M·ª•c ƒë√≠ch: Th√™m m·ªôt b·∫£n ghi m·ªõi v√†o b·∫£ng DynamoDB. Gi·∫£i th√≠ch: put_item(): Th√™m d·ªØ li·ªáu. C√°c tr∆∞·ªùng: id, text, voice, status. G·ª≠i th√¥ng b√°o ƒë·∫øn SNS client = boto3.client(\u0026#39;sns\u0026#39;) client.publish( TopicArn=os.environ[\u0026#39;SNS_TOPIC\u0026#39;], Message=recordId ) M·ª•c ƒë√≠ch: Th√¥ng b√°o r·∫±ng c√≥ b√†i vi·∫øt m·ªõi c·∫ßn x·ª≠ l√Ω. Gi·∫£i th√≠ch: publish(): G·ª≠i tin nh·∫Øn t·ªõi SNS topic. Message: Ch·ª©a ID b√†i vi·∫øt. Tr·∫£ v·ªÅ ID b√†i vi·∫øt return recordId M·ª•c ƒë√≠ch: Tr·∫£ v·ªÅ ID ƒë·ªÉ s·ª≠ d·ª•ng sau n√†y. 3. C·∫•u h√¨nh Environment Variables DB_TABLE_NAME: posts BUCKET_NAME: audioposts-123 (Thay b·∫±ng t√™n bucket c·ªßa b·∫°n) 4. TƒÉng Th·ªùi Gian Timeout ƒêi·ªÅu ch·ªânh Timeout: 5 minutes. 5. Th√™m Trigger SNS Trigger: SNS SNS topic: new_posts 6. Deploy v√† Ki·ªÉm tra Nh·∫•n Deploy ƒë·ªÉ tri·ªÉn khai. Sau ƒë√≥, ki·ªÉm tra b·∫±ng c√°ch g·ª≠i tin nh·∫Øn t·ªõi topic SNS new_posts. N·∫øu th√†nh c√¥ng, file √¢m thanh s·∫Ω xu·∫•t hi·ªán trong bucket S3 v·ªõi tr·∫°ng th√°i UPDATED trong DynamoDB.\n"
},
{
	"uri": "http://HuuDung113.github.io/vi/3-integratepolly/3.2-create-an-amazon-s3-bucket/",
	"title": "T·∫°o m·ªôt Amazon S3 bucket",
	"tags": [],
	"description": "",
	"content": "N·ªôi dung:\nT·∫°o m·ªôt Amazon S3 bucket. C·∫•u h√¨nh c√°c quy·ªÅn c·∫ßn thi·∫øt. 3.2.1. T·∫°o Amazon S3 Bucket Nhi·ªám v·ª• 1: T·∫°o m·ªôt Amazon S3 Bucket\nTruy c·∫≠p Amazon S3 Console v√† ch·ªçn Create bucket (T·∫°o bucket).\nNh·∫≠p c√°c th√¥ng tin sau:\nBucket name (T√™n bucket): audioposts-NUMBER (thay NUMBER b·∫±ng m·ªôt s·ªë ng·∫´u nhi√™n ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh duy nh·∫•t). Trong ph·∫ßn Object Ownership (Quy·ªÅn s·ªü h·ªØu ƒë·ªëi t∆∞·ª£ng), ch·ªçn ACLs enabled (B·∫≠t ACLs).\nTrong ph·∫ßn Block Public Access settings (C√†i ƒë·∫∑t ch·∫∑n truy c·∫≠p c√¥ng khai), b·ªè ch·ªçn Block all public access (Ch·∫∑n t·∫•t c·∫£ truy c·∫≠p c√¥ng khai). X√°c nh·∫≠n c·∫£nh b√°o b·∫±ng c√°ch ch·ªçn v√†o √¥ ki·ªÉm c·∫°nh d√≤ng:\nT√¥i x√°c nh·∫≠n r·∫±ng c√°c c√†i ƒë·∫∑t hi·ªán t·∫°i c√≥ th·ªÉ khi·∫øn bucket n√†y v√† c√°c ƒë·ªëi t∆∞·ª£ng b√™n trong tr·ªü n√™n c√¥ng khai.\nNh·∫•n Create bucket (T·∫°o bucket).\nL∆∞u √Ω quan tr·ªçng:\nT√™n bucket ph·∫£i l√† duy nh·∫•t tr√™n to√†n c·∫ßu. Trong m√¥i tr∆∞·ªùng s·∫£n xu·∫•t, n√™n √°p d·ª•ng c√°c c√†i ƒë·∫∑t h·∫°n ch·∫ø quy·ªÅn truy c·∫≠p ·ªü m·ª©c th·∫•p nh·∫•t c√≥ th·ªÉ ƒë·ªÉ ƒë·∫£m b·∫£o an to√†n. Sau khi t·∫°o bucket th√†nh c√¥ng, b·∫°n c√≥ th·ªÉ ti·∫øp t·ª•c t√≠ch h·ª£p bucket v√†o ·ª©ng d·ª•ng c·ªßa m√¨nh. ‚úÖ\n"
},
{
	"uri": "http://HuuDung113.github.io/vi/2-prerequiste/",
	"title": "C√°c b∆∞·ªõc chu·∫©n b·ªã",
	"tags": [],
	"description": "",
	"content": "C√°c b∆∞·ªõc chu·∫©n b·ªã Ph·∫ßn n√†y bao g·ªìm c√°c thi·∫øt l·∫≠p c·∫ßn thi·∫øt tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu workshop.\n1. Thi·∫øt l·∫≠p t√†i kho·∫£n AWS ƒê·∫£m b·∫£o b·∫°n c√≥ t√†i kho·∫£n AWS v·ªõi quy·ªÅn qu·∫£n tr·ªã. 2. C√†i ƒë·∫∑t AWS CLI v√† Boto3 C√†i ƒë·∫∑t AWS CLI: pip install awscli C·∫•u h√¨nh AWS CLI: aws configure C√†i ƒë·∫∑t Boto3: pip install boto3 3. Thi·∫øt l·∫≠p CloudFormation 1. T·∫£i xu·ªëng t·ªáp m·∫´u CloudFormation\n2. L∆∞u t·ªáp YAML v√†o m·ªôt th∆∞ m·ª•c tr√™n m√°y c·ªßa b·∫°n.\n3. Truy c·∫≠p CloudFormation trong AWS Management Console.\n4. Tr√™n b·∫£ng ƒëi·ªÅu khi·ªÉn CloudFormation, ch·ªçn Upload a template file.\n5. Ch·ªçn t·ªáp m·∫´u v·ª´a t·∫£i xu·ªëng, sau ƒë√≥ nh·∫•n Next.\n6. ƒê·∫∑t t√™n cho stack, v√≠ d·ª•: polly-serverless-stack.\n7. ·ªû ph·∫ßn Configure stack options, gi·ªØ nguy√™n c√°c gi√° tr·ªã m·∫∑c ƒë·ªãnh v√† nh·∫•n Next.\n8. Trong Capabilities and transforms, h√£y x√°c nh·∫≠n t·∫•t c·∫£ c√°c quy·ªÅn.\n9. ƒê·ªÉ tri·ªÉn khai m·∫´u, h√£y ch·ªçn G·ª≠i .\n10. Sau khi m·∫´u ƒë∆∞·ª£c tri·ªÉn khai, ƒë·ªÉ xem l·∫°i c√°c t√†i nguy√™n ƒë√£ t·∫°o, h√£y ƒëi·ªÅu h∆∞·ªõng ƒë·∫øn T√†i nguy√™n CloudFormation , sau ƒë√≥ ch·ªçn ngƒÉn x·∫øp CloudFormation m√† b·∫°n ƒë√£ t·∫°o.\nVi·ªác tri·ªÉn khai Cloud Formation m·∫•t kho·∫£ng 1‚Äì2 ph√∫t ƒë·ªÉ ho√†n t·∫•t.\nT·∫°o th√†nh c√¥ng. 4. Quy·ªÅn h·∫°n c·∫ßn thi·∫øt ƒê·∫£m b·∫£o IAM roles c√≥ c√°c quy·ªÅn sau: Amazon Polly Lambda API Gateway S3 5. C√†i ƒë·∫∑t m√¥i tr∆∞·ªùng c·ª•c b·ªô C√†i ƒë·∫∑t Python, VS Code v√† c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt. 6. Ki·ªÉm tra t√†i nguy√™n AWS Ki·ªÉm tra c√°c t√†i nguy√™n trong AWS CloudFormation sau khi tri·ªÉn khai. "
},
{
	"uri": "http://HuuDung113.github.io/vi/4-deploylambda/4.3-test-the-functions/",
	"title": "Ki·ªÉm tra c√°c ch·ª©c nƒÉng",
	"tags": [],
	"description": "",
	"content": "1. K√≠ch ho·∫°t Ch·ª©c nƒÉng New Post Lambda M·ªü AWS Management Console. ·ªû g√≥c tr√™n b√™n tr√°i, ch·ªçn Lambda \u0026gt; Functions. Ch·ªçn h√†m PostReader_NewPost. 4. Ch·ªçn Test ƒë·ªÉ k√≠ch ho·∫°t h√†m.\nN·∫øu th√†nh c√¥ng, b·∫°n s·∫Ω th·∫•y th√¥ng b√°o: K·∫øt qu·∫£ th·ª±c hi·ªán: th√†nh c√¥ng. 2. X√°c nh·∫≠n D·ªØ li·ªáu trong DynamoDB Tr√™n thanh t√¨m ki·∫øm AWS, t√¨m v√† ch·ªçn DynamoDB. ·ªû thanh ƒëi·ªÅu h∆∞·ªõng b√™n tr√°i, ch·ªçn Kh√°m ph√° m·ª•c. Ch·ªçn b·∫£ng posts. Ki·ªÉm tra xem c√≥ hai m·ª•c nh·∫≠p hay kh√¥ng (t∆∞∆°ng ·ª©ng v·ªõi hai l·∫ßn ch·∫°y th·ª≠ nghi·ªám): M·ª•c th·ª© hai s·∫Ω c√≥ tr∆∞·ªùng url n·∫øu qu√° tr√¨nh chuy·ªÉn ƒë·ªïi √¢m thanh th√†nh c√¥ng. 3. Ki·ªÉm tra Ch·ª©c nƒÉng ConvertToAudio Lambda Tr√™n thanh t√¨m ki·∫øm AWS, t√¨m v√† ch·ªçn Lambda. Ch·ªçn h√†m ConvertToAudio. Ch·ªçn tab Gi√°m s√°t. Xem bi·ªÉu ƒë·ªì S·ªë l·∫ßn th·ª±c hi·ªán v√† T·ª∑ l·ªá th√†nh c√¥ng: N·∫øu bi·ªÉu ƒë·ªì cho th·∫•y ho·∫°t ƒë·ªông th√†nh c√¥ng, chuy·ªÉn sang b∆∞·ªõc ti·∫øp theo. N·∫øu c√≥ l·ªói, ch·ªçn Xem nh·∫≠t k√Ω CloudWatch ƒë·ªÉ ki·ªÉm tra th√¥ng b√°o l·ªói. V√≠ d·ª•: The specified bucket does not exist ‚Üí Ki·ªÉm tra l·∫°i t√™n bucket trong Bi·∫øn m√¥i tr∆∞·ªùng. 4. X√°c minh T·ªáp √Çm thanh trong S3 Tr√™n thanh t√¨m ki·∫øm AWS, t√¨m v√† ch·ªçn S3. Ch·ªçn bucket m√† b·∫°n ƒë√£ ch·ªâ ƒë·ªãnh cho c√°c t·ªáp √¢m thanh (v√≠ d·ª•: audioposts-0110). T√¨m t·ªáp MP3 v·ªõi t√™n t∆∞∆°ng ·ª©ng v·ªõi postId. T·∫£i t·ªáp xu·ªëng v√† m·ªü ƒë·ªÉ nghe: N·∫øu n·ªôi dung ƒë√∫ng, b·∫°n s·∫Ω nghe Polly n√≥i: ƒêi·ªÅu n√†y hi·ªáu qu·∫£! 5. X·ª≠ l√Ω L·ªói (n·∫øu c√≥) N·∫øu t·ªáp MP3 kh√¥ng xu·∫•t hi·ªán: Ki·ªÉm tra CloudWatch Logs c·ªßa ConvertToAudio Lambda. Ki·ªÉm tra l·ªói v√† s·ª≠a l·ªói ·ªü Log events Ki·ªÉm tra c√°c quy·ªÅn tr√™n S3 bucket (ƒë·∫£m b·∫£o t·ªáp ƒë∆∞·ª£c ƒë·∫∑t l√† public-read). N·∫øu √¢m thanh kh√¥ng ch√≠nh x√°c: Ki·ªÉm tra vƒÉn b·∫£n trong DynamoDB. X√°c minh c√†i ƒë·∫∑t VoiceId trong m√£ Lambda. K·∫øt qu·∫£ mong ƒë·ª£i:\nC√°c t·ªáp √¢m thanh MP3 ƒë∆∞·ª£c l∆∞u trong S3 bucket. URL c·ªßa t·ªáp √¢m thanh ƒë∆∞·ª£c c·∫≠p nh·∫≠t trong DynamoDB. Khi t·∫£i t·ªáp MP3 v·ªÅ, b·∫°n s·∫Ω nghe ƒë∆∞·ª£c gi·ªçng n√≥i t·ª´ d·ªãch v·ª• Amazon Polly ƒë·ªçc ch√≠nh x√°c n·ªôi dung b√†i ƒëƒÉng. "
},
{
	"uri": "http://HuuDung113.github.io/vi/3-integratepolly/3.3-create-an-sns-topic/",
	"title": "T·∫°o m·ªôt SNS Topic",
	"tags": [],
	"description": "",
	"content": "Trong b∆∞·ªõc n√†y, ch√∫ng ta s·∫Ω t·∫°o m·ªôt SNS topic ƒë·ªÉ t√≠ch h·ª£p c√°c h√†m Lambda.\nC√°c b∆∞·ªõc th·ª±c hi·ªán M·ªü AWS Management Console v√† t√¨m ki·∫øm Simple Notification Service (SNS). Trong thanh ƒëi·ªÅu h∆∞·ªõng b√™n tr√°i, ch·ªçn Topics. Nh·∫•n Create topic v√† c·∫•u h√¨nh nh∆∞ sau: Type: Standard (cho ph√©p nhi·ªÅu subscriber v√† t·ª± ƒë·ªông th·ª≠ l·∫°i khi g·ª≠i th·∫•t b·∫°i) Name: new_posts (t√™n duy nh·∫•t ƒë·ªÉ nh·∫≠n di·ªán topic) Display name: New Posts (t√πy ch·ªçn, d√πng cho th√¥ng b√°o qua email) Ch·ªçn Create topic (T·∫°o topic). Chi ti·∫øt c·∫•u h√¨nh Sau khi t·∫°o, sao ch√©p Topic ARN v√† l∆∞u l·∫°i ƒë·ªÉ s·ª≠ d·ª•ng sau n√†y. ARN n√†y l√† ƒë·ªãnh danh duy nh·∫•t cho SNS topic v√† s·∫Ω c·∫ßn khi c·∫•u h√¨nh c√°c h√†m Lambda. ARN mong ƒë·ª£i:\narn:aws:sns:us-west-2:123456789012:new_posts Gi·∫£i th√≠ch SNS Topic: L√† k√™nh giao ti·∫øp gi·ªØa c√°c h√†m Lambda. Lo·∫°i Standard: Cho ph√©p nhi·ªÅu subscriber nh·∫≠n th√¥ng b√°o c√πng l√∫c. Topic ARN: Chu·ªói n√†y c·∫ßn thi·∫øt ƒë·ªÉ c·∫•p quy·ªÅn cho Lambda xu·∫•t b·∫£n tin nh·∫Øn. L∆∞u √Ω: ARN n√†y s·∫Ω ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ t√≠ch h·ª£p v·ªõi c√°c h√†m Lambda v√† c·∫ßn ƒë∆∞·ª£c gi·ªØ b√≠ m·∫≠t ƒë·ªÉ ƒë·∫£m b·∫£o an to√†n. ‚úÖ\n"
},
{
	"uri": "http://HuuDung113.github.io/vi/4-deploylambda/4.4-create-a-get-post-lambda-function/",
	"title": "T·∫°o H√†m Lambda Get Post",
	"tags": [],
	"description": "",
	"content": "1. T·∫°o H√†m Lambda Get Post M·ªü AWS Management Console. Tr√™n thanh t√¨m ki·∫øm, nh·∫≠p Lambda v√† ch·ªçn k·∫øt qu·∫£ t∆∞∆°ng ·ª©ng. Ch·ªçn Create function. Ch·ªçn Author from scratch v√† ƒë·∫∑t c√°c th√¥ng s·ªë sau: Function name: PostReader_GetPost Runtime: Python 3.12 M·ªü r·ªông ph·∫ßn Change default execution role: Execution role: Use an existing role Existing role: Lab-Lambda-Role Cu·ªôn xu·ªëng v√† nh·∫•n Create function. T·∫°o th√†nh c√¥ng ! ‚úÖ ![Complete] (/images/4-deploylambda/4.4/3.png)\n2. Th√™m M√£ Ngu·ªìn cho Lambda D∆∞·ªõi ƒë√¢y l√† m√£ ngu·ªìn k√®m theo gi·∫£i th√≠ch chi ti·∫øt:\nimport boto3 import os from boto3.dynamodb.conditions import Key, Attr def lambda_handler(event, context): # L·∫•y postId t·ª´ s·ª± ki·ªán ƒë·∫ßu v√†o postId = event[\u0026#34;postId\u0026#34;] # Kh·ªüi t·∫°o t√†i nguy√™n DynamoDB dynamodb = boto3.resource(\u0026#39;dynamodb\u0026#39;) # K·∫øt n·ªëi ƒë·∫øn b·∫£ng ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh trong bi·∫øn m√¥i tr∆∞·ªùng table = dynamodb.Table(os.environ[\u0026#39;DB_TABLE_NAME\u0026#39;]) # N·∫øu postId l√† \u0026#39;*\u0026#39;, truy xu·∫•t t·∫•t c·∫£ c√°c b√†i vi·∫øt if postId == \u0026#34;*\u0026#34;: # S·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c scan() ƒë·ªÉ l·∫•y t·∫•t c·∫£ c√°c m·ª•c trong b·∫£ng items = table.scan() else: # S·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c query() ƒë·ªÉ l·∫•y m·ª•c v·ªõi ID c·ª• th·ªÉ items = table.query( KeyConditionExpression=Key(\u0026#39;id\u0026#39;).eq(postId) ) # Tr·∫£ v·ªÅ c√°c m·ª•c ƒë∆∞·ª£c truy xu·∫•t d∆∞·ªõi d·∫°ng ph·∫£n h·ªìi return items[\u0026#34;Items\u0026#34;] Gi·∫£i Th√≠ch M√£ Ngu·ªìn: Nh·∫≠p Th∆∞ Vi·ªán: import boto3 import os from boto3.dynamodb.conditions import Key, Attr boto3: SDK c·ªßa AWS cho Python ƒë·ªÉ t∆∞∆°ng t√°c v·ªõi DynamoDB. os: Truy c·∫≠p c√°c bi·∫øn m√¥i tr∆∞·ªùng ƒë·ªÉ c·∫•u h√¨nh. boto3.dynamodb.conditions: H·ªó tr·ª£ truy v·∫•n v·ªõi ƒëi·ªÅu ki·ªán kh√≥a. Nh·∫≠n Tham S·ªë ƒê·∫ßu V√†o: postId = event[\u0026#34;postId\u0026#34;] H√†m nh·∫≠n m·ªôt s·ª± ki·ªán c√≥ ch·ª©a postId. Kh·ªüi T·∫°o DynamoDB: dynamodb = boto3.resource(\u0026#39;dynamodb\u0026#39;) table = dynamodb.Table(os.environ[\u0026#39;DB_TABLE_NAME\u0026#39;]) K·∫øt n·ªëi t·ªõi b·∫£ng DynamoDB ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh b·∫±ng bi·∫øn m√¥i tr∆∞·ªùng DB_TABLE_NAME. Logic Truy V·∫•n: if postId == \u0026#34;*\u0026#34;: items = table.scan() else: items = table.query( KeyConditionExpression=Key(\u0026#39;id\u0026#39;).eq(postId) ) N·∫øu postId l√† *, h√†m s·∫Ω l·∫•y t·∫•t c·∫£ b√†i vi·∫øt b·∫±ng ph∆∞∆°ng th·ª©c scan(). N·∫øu nh·∫≠n ƒë∆∞·ª£c m·ªôt postId c·ª• th·ªÉ, h√†m s·∫Ω d√πng query() ƒë·ªÉ truy v·∫•n b√†i vi·∫øt t∆∞∆°ng ·ª©ng. ‚ö†Ô∏è L∆∞u √Ω: Vi·ªác s·ª≠ d·ª•ng scan() v·ªõi b·∫£ng l·ªõn c√≥ th·ªÉ g√¢y ·∫£nh h∆∞·ªüng ƒë·∫øn hi·ªáu su·∫•t.\nTr·∫£ K·∫øt Qu·∫£: return items[\u0026#34;Items\u0026#34;] Tr·∫£ v·ªÅ danh s√°ch c√°c b√†i vi·∫øt l·∫•y ƒë∆∞·ª£c t·ª´ c∆° s·ªü d·ªØ li·ªáu. 3. Tri·ªÉn Khai H√†m Nh·∫•n Deploy ƒë·ªÉ tri·ªÉn khai m√£ ngu·ªìn. 4. C·∫•u H√¨nh Bi·∫øn M√¥i Tr∆∞·ªùng Chuy·ªÉn ƒë·∫øn tab Configuration. ·ªû thanh ƒëi·ªÅu h∆∞·ªõng b√™n tr√°i, ch·ªçn Environment variables. Ch·ªçn Edit. Nh·∫•n Add environment variable v√† th√™m: Key: DB_TABLE_NAME Value: posts Nh·∫•n Save. 5. Ki·ªÉm Tra H√†m Lambda Chuy·ªÉn ƒë·∫øn tab Test. Ch·ªçn Create new test event. ƒê·∫∑t t√™n cho s·ª± ki·ªán l√† AllPosts. Thay th·∫ø n·ªôi dung s·ª± ki·ªán b·∫±ng ƒëo·∫°n JSON sau: { \u0026#34;postId\u0026#34;: \u0026#34;*\u0026#34; } Nh·∫•n Save. Nh·∫•n Test ƒë·ªÉ ch·∫°y th·ª≠. K·∫øt Qu·∫£ Mong ƒê·ª£i:\nHi·ªÉn th·ªã th√¥ng b√°o: Execution result: succeeded. M·ªü r·ªông ph·∫ßn Details ƒë·ªÉ xem danh s√°ch c√°c b√†i vi·∫øt t·ª´ DynamoDB. üéØ ƒê√£ t·∫°o th√†nh c√¥ng H√†m Lambda Get Post.‚úÖ\n"
},
{
	"uri": "http://HuuDung113.github.io/vi/3-integratepolly/",
	"title": "T√≠ch h·ª£p Amazon Polly",
	"tags": [],
	"description": "",
	"content": "Ph·∫ßn n√†y cung c·∫•p h∆∞·ªõng d·∫´n t·ª´ng b∆∞·ªõc ƒë·ªÉ t√≠ch h·ª£p Amazon Polly v·ªõi c√°c d·ªãch v·ª• AWS. Ph·∫ßn n√†y bao g·ªìm t·∫°o th√πng S3 ƒë·ªÉ l∆∞u tr·ªØ √¢m thanh, thi·∫øt l·∫≠p ch·ªß ƒë·ªÅ SNS ƒë·ªÉ giao ti·∫øp h√†m Lambda v√† s·ª≠ d·ª•ng DynamoDB ƒë·ªÉ qu·∫£n l√Ω d·ªØ li·ªáu vƒÉn b·∫£n th√†nh gi·ªçng n√≥i.\nContent 3.1. T·∫°o b·∫£ng DynamoDB\n3.2. T·∫°o th√πng Amazon S3\n3.3. T·∫°o ch·ªß ƒë·ªÅ SNS\n"
},
{
	"uri": "http://HuuDung113.github.io/vi/5-apigateway/5.1-expose-the-lambda-function-as-a-restful-web-service/",
	"title": "Hi·ªÉn th·ªã ch·ª©c nƒÉng Lambda d∆∞·ªõi d·∫°ng d·ªãch v·ª• web RESTful",
	"tags": [],
	"description": "",
	"content": "1. M·ªü AWS API Gateway M·ªü AWS Management Console. Tr√™n thanh t√¨m ki·∫øm, nh·∫≠p API Gateway v√† ch·ªçn k·∫øt qu·∫£ t∆∞∆°ng ·ª©ng. Trong b·∫£ng REST API, ch·ªçn Build. Trong ph·∫ßn Create REST API, thi·∫øt l·∫≠p nh∆∞ sau: API type: REST API API name: PostReaderAPI Description: API for PostReader Application Endpoint Type: Regional Nh·∫•n Create API. Gi·∫£i th√≠ch: API Gateway l√† d·ªãch v·ª• qu·∫£n l√Ω API c·ªßa AWS gi√∫p b·∫°n t·∫°o, gi√°m s√°t v√† b·∫£o v·ªá c√°c API. Regional: Tri·ªÉn khai API trong m·ªôt khu v·ª±c c·ª• th·ªÉ ƒë·ªÉ t·ªëi ∆∞u h√≥a hi·ªáu su·∫•t cho ng∆∞·ªùi d√πng trong khu v·ª±c ƒë√≥. T·∫°o th√†nh c√¥ng ! ‚úÖ\n2. T·∫°o Ph∆∞∆°ng Th·ª©c POST Trong pane Resources, ch·ªçn bi·ªÉu t∆∞·ª£ng /. Ch·ªçn Create Method. Ch·ªçn POST t·ª´ danh s√°ch. Trong Lambda Function, nh·∫≠p PostReader_NewPost. Ch·ªçn Create method. T·∫°o th√†nh c√¥ng ! ‚úÖ\nGi·∫£i th√≠ch:\nPOST l√† ph∆∞∆°ng th·ª©c HTTP ƒë·ªÉ g·ª≠i d·ªØ li·ªáu m·ªõi l√™n server. ·ªû ƒë√¢y, khi g·ªçi API v·ªõi ph∆∞∆°ng th·ª©c POST, Lambda function PostReader_NewPost s·∫Ω x·ª≠ l√Ω y√™u c·∫ßu ƒë·ªÉ th√™m b√†i vi·∫øt m·ªõi v√†o c∆° s·ªü d·ªØ li·ªáu DynamoDB. Lu·ªìng ho·∫°t ƒë·ªông:\nNg∆∞·ªùi d√πng g·ª≠i y√™u c·∫ßu POST v·ªõi d·ªØ li·ªáu b√†i vi·∫øt. API Gateway chuy·ªÉn y√™u c·∫ßu ƒë·∫øn Lambda function. Lambda x·ª≠ l√Ω v√† th√™m d·ªØ li·ªáu v√†o DynamoDB. 3. T·∫°o Ph∆∞∆°ng Th·ª©c GET Trong pane Resources, ch·ªçn bi·ªÉu t∆∞·ª£ng /. Ch·ªçn Create Method. Ch·ªçn GET t·ª´ danh s√°ch. Trong Lambda Function, nh·∫≠p PostReader_GetPost. Ch·ªçn Create method. Gi·∫£i th√≠ch:\nGET l√† ph∆∞∆°ng th·ª©c HTTP ƒë·ªÉ l·∫•y d·ªØ li·ªáu t·ª´ server. Lambda function PostReader_GetPost s·∫Ω x·ª≠ l√Ω y√™u c·∫ßu ƒë·ªÉ tr·∫£ v·ªÅ th√¥ng tin b√†i vi·∫øt theo postId. Lu·ªìng ho·∫°t ƒë·ªông:\nNg∆∞·ªùi d√πng g·ª≠i y√™u c·∫ßu GET v·ªõi tham s·ªë postId. API Gateway chuy·ªÉn y√™u c·∫ßu ƒë·∫øn Lambda function. Lambda truy v·∫•n DynamoDB v√† tr·∫£ v·ªÅ th√¥ng tin b√†i vi·∫øt. 4. K√≠ch Ho·∫°t CORS (Cross-Origin Resource Sharing) Trong pane Resources, ch·ªçn bi·ªÉu t∆∞·ª£ng /. Ch·ªçn Enable CORS. Ch·ªçn c√°c t√πy ch·ªçn: Default 4XX v√† Default 5XX. Access-Control-Allow-Methods: GET, POST Nh·∫•n Save. T·∫°o th√†nh c√¥ng ! ‚úÖ\nGi·∫£i th√≠ch:\nCORS cho ph√©p c√°c ·ª©ng d·ª•ng web t·ª´ c√°c domain kh√°c nhau c√≥ th·ªÉ truy c·∫≠p v√†o API. ƒêi·ªÅu n√†y ƒë·∫∑c bi·ªát c·∫ßn thi·∫øt khi API c·ªßa b·∫°n ƒë∆∞·ª£c g·ªçi t·ª´ m·ªôt website kh√°c domain. V√≠ d·ª•:\nWebsite example.com c√≥ th·ªÉ g·ª≠i y√™u c·∫ßu t·ªõi API ƒë∆∞·ª£c tri·ªÉn khai tr√™n api.example.net. 5. C·∫•u H√¨nh Tham S·ªë Truy V·∫•n cho GET Ch·ªçn ph∆∞∆°ng th·ª©c GET trong pane Resources. Trong Method Request, ch·ªçn Edit. M·ªü r·ªông URL query string parameters. Ch·ªçn Add query string v√† nh·∫≠p: Name: postId Nh·∫•n Save. Gi·∫£i th√≠ch:\nQuery string parameters cho ph√©p truy·ªÅn d·ªØ li·ªáu qua URL. ·ªû ƒë√¢y, postId s·∫Ω ƒë∆∞·ª£c d√πng ƒë·ªÉ x√°c ƒë·ªãnh b√†i vi·∫øt c·∫ßn l·∫•y d·ªØ li·ªáu. V√≠ d·ª•:\nhttps://api.example.com/dev/posts?postId=123 6. C·∫•u H√¨nh Mapping Template Ch·ªçn GET method. Ch·ªçn Integration Request. Ch·ªçn Edit trong m·ª•c Mapping Templates. Ch·ªçn Add mapping template. Nh·∫≠p c√°c th√¥ng tin sau: Content type: application/json Template body: { \u0026#34;postId\u0026#34; : \u0026#34;$input.params(\u0026#39;postId\u0026#39;)\u0026#34; } Nh·∫•n Save. Gi·∫£i th√≠ch:\nMapping Template gi√∫p chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu t·ª´ query string th√†nh JSON. Lambda function PostReader_GetPost c·∫ßn d·ªØ li·ªáu d∆∞·ªõi d·∫°ng JSON, n√™n mapping template s·∫Ω ƒë·∫£m b·∫£o tham s·ªë postId ƒë∆∞·ª£c truy·ªÅn ƒë√∫ng ƒë·ªãnh d·∫°ng. C√°ch ho·∫°t ƒë·ªông:\npostId t·ª´ URL s·∫Ω ƒë∆∞·ª£c chuy·ªÉn th√†nh JSON: { \u0026quot;postId\u0026quot;: \u0026quot;123\u0026quot; }. 7. Tri·ªÉn Khai API Ch·ªçn Deploy API. Ch·ªçn New Stage. Nh·∫≠p c√°c th√¥ng tin sau: Stage name: Dev Nh·∫•n Deploy. Sao ch√©p Invoke URL hi·ªÉn th·ªã sau khi tri·ªÉn khai. Gi·∫£i th√≠ch:\nDeploy gi√∫p √°p d·ª•ng c√°c c·∫•u h√¨nh v√† cho ph√©p ng∆∞·ªùi d√πng b√™n ngo√†i truy c·∫≠p API. Stage name Dev ch·ªâ ƒë·ªãnh ƒë√¢y l√† m√¥i tr∆∞·ªùng ph√°t tri·ªÉn. V√≠ d·ª•:\nhttps://abc123.execute-api.us-east-1.amazonaws.com/Dev/posts üéØ K·∫øt Qu·∫£ Mong ƒê·ª£i: API ƒë√£ s·∫µn s√†ng ho·∫°t ƒë·ªông v·ªõi c√°c ph∆∞∆°ng th·ª©c GET v√† POST. S·ª≠ d·ª•ng Invoke URL ƒë·ªÉ th·ª≠ nghi·ªám ho·∫∑c t√≠ch h·ª£p v√†o ·ª©ng d·ª•ng. G·ª≠i y√™u c·∫ßu POST ƒë·ªÉ th√™m b√†i vi·∫øt ho·∫∑c GET ƒë·ªÉ l·∫•y th√¥ng tin b√†i vi·∫øt. üîç L∆∞u √Ω:\nKi·ªÉm tra k·ªπ quy·ªÅn truy c·∫≠p IAM cho Lambda functions. S·ª≠ d·ª•ng Postman ho·∫∑c curl ƒë·ªÉ ki·ªÉm th·ª≠ API. üéâ Ch√∫c m·ª´ng! B·∫°n ƒë√£ tri·ªÉn khai th√†nh c√¥ng API Gateway ƒë·ªÉ expose Lambda function d∆∞·ªõi d·∫°ng RESTful Web Service. üöÄ\n"
},
{
	"uri": "http://HuuDung113.github.io/vi/4-deploylambda/",
	"title": "Tri·ªÉn khai lambda",
	"tags": [],
	"description": "",
	"content": "Trong ph·∫ßn n√†y, ch√∫ng ta s·∫Ω t·∫°o c√°cc√°c h√†m Lambda tr√™n AWS ƒë·ªÉ x·ª≠ l√Ω c√°c b√†i vi·∫øt m·ªõi v√† chuy·ªÉn ƒë·ªïi ch√∫ng th√†nh gi·ªçng n√≥i th√¥ng qua d·ªãch v·ª• Text-to-Speech. C√°c h√†m Lambda n√†y s·∫Ω ƒë·∫£m nh·∫≠n c√°c ch·ª©c nƒÉng kh√°c nhau trong quy tr√¨nh, t·ª´ vi·ªác nh·∫≠n c√°c th√¥ng tin ƒë·∫ßu v√†o, l∆∞u tr·ªØ d·ªØ li·ªáu v√†o DynamoDB, ƒë·∫øn vi·ªác g·ª≠i th√¥ng b√°o qua SNS ƒë·ªÉ k√≠ch ho·∫°t c√°c b∆∞·ªõc x·ª≠ l√Ω ti·∫øp theo.\nVi·ªác s·ª≠ d·ª•ng c√°c h√†m trong Lambda gi√∫p ph√¢n chia c√°c c√¥ng vi·ªác v√† t·ªëi ∆∞u h√≥a hi·ªáu su·∫•t c·ªßa h·ªá th·ªëng, ƒë·ªìng th·ªùi d·ªÖ d√†ng m·ªü r·ªông v√† b·∫£o tr√¨ trong t∆∞∆°ng lai.\nN√¥Ã£i dung: T·∫°o Lambda Function X·ª≠ L√Ω B√†i Vi·∫øt M·ªõi T·∫°o h√†m Lambda Chuy·ªÉn ƒë·ªïi th√†nh √¢m thanh Ki·ªÉm tra c√°c ch·ª©c nƒÉng T·∫°o H√†m Lambda Get Post "
},
{
	"uri": "http://HuuDung113.github.io/vi/5-apigateway/",
	"title": "Qu·∫£n L√Ω API Gateway",
	"tags": [],
	"description": "",
	"content": "üîç Gi·ªõi Thi·ªáu T·ªïng Quan Amazon API Gateway l√† m·ªôt d·ªãch v·ª• ƒë∆∞·ª£c qu·∫£n l√Ω to√†n ph·∫ßn, cho ph√©p b·∫°n t·∫°o, xu·∫•t b·∫£n, duy tr√¨, gi√°m s√°t v√† b·∫£o m·∫≠t c√°c API m·ªôt c√°ch d·ªÖ d√†ng. ƒê√¢y l√† c·∫ßu n·ªëi quan tr·ªçng gi·ªØa ·ª©ng d·ª•ng c·ªßa b·∫°n v·ªõi c√°c d·ªãch v·ª• backend nh∆∞ AWS Lambda, gi√∫p ng∆∞·ªùi d√πng cu·ªëi t∆∞∆°ng t√°c v·ªõi ·ª©ng d·ª•ng th√¥ng qua giao di·ªán RESTful ho·∫∑c WebSocket.\nTrong ph·∫ßn n√†y, ch√∫ng ta s·∫Ω t√¨m hi·ªÉu c√°ch tri·ªÉn khai v√† qu·∫£n l√Ω API Gateway ƒë·ªÉ k·∫øt n·ªëi v·ªõi AWS Lambda nh·∫±m cung c·∫•p d·ªãch v·ª• chuy·ªÉn vƒÉn b·∫£n th√†nh gi·ªçng n√≥i t·ª´ Amazon Polly. Ph·∫ßn n√†y g·ªìm c√°c b∆∞·ªõc ƒë·ªÉ c·∫•u h√¨nh API, x·ª≠ l√Ω c√°c y√™u c·∫ßu t·ª´ ng∆∞·ªùi d√πng v√† t·ªëi ∆∞u hi·ªáu su·∫•t ho·∫°t ƒë·ªông.\nüå± Vai Tr√≤ C·ªßa API Gateway Trong ·ª®ng D·ª•ng TTS üõ†Ô∏è Trung Gian Giao Ti·∫øp: Ti·∫øp nh·∫≠n y√™u c·∫ßu vƒÉn b·∫£n t·ª´ ng∆∞·ªùi d√πng v√† g·ª≠i ƒë·∫øn Lambda ƒë·ªÉ x·ª≠ l√Ω. üö¶ Qu·∫£n L√Ω Truy C·∫≠p: Cung c·∫•p c√°c c∆° ch·∫ø x√°c th·ª±c v√† ph√¢n quy·ªÅn nh∆∞ IAM, API Key v√† OAuth 2.0. ‚ö° T·ªëi ∆Øu Hi·ªáu Su·∫•t: H·ªó tr·ª£ caching ƒë·ªÉ tƒÉng t·ªëc ƒë·ªô ph·∫£n h·ªìi v√† gi·∫£m t·∫£i cho backend. üìà Gi√°m S√°t Hi·ªáu Qu·∫£: T√≠ch h·ª£p v·ªõi Amazon CloudWatch ƒë·ªÉ theo d√µi l∆∞u l∆∞·ª£ng v√† hi·ªáu su·∫•t. N·ªôi dung: Hi·ªÉn th·ªã ch·ª©c nƒÉng Lambda d∆∞·ªõi d·∫°ng d·ªãch v·ª• web RESTful üéØ K·∫øt Qu·∫£ Mong ƒê·ª£i Sau ph·∫ßn n√†y, b·∫°n s·∫Ω n·∫Øm ƒë∆∞·ª£c c√°ch:\nT·∫°o v√† c·∫•u h√¨nh m·ªôt REST API. K·∫øt n·ªëi API v·ªõi AWS Lambda ƒë·ªÉ x·ª≠ l√Ω y√™u c·∫ßu. K√≠ch ho·∫°t t√≠nh nƒÉng API Caching nh·∫±m t·ªëi ∆∞u t·ªëc ƒë·ªô ph·∫£n h·ªìi. Qu·∫£n l√Ω b·∫£o m·∫≠t v√† gi√°m s√°t ho·∫°t ƒë·ªông c·ªßa API. API Gateway ch√≠nh l√† ch√¨a kh√≥a gi√∫p ·ª©ng d·ª•ng TTS kh√¥ng m√°y ch·ªß c·ªßa b·∫°n tr·ªü n√™n m·∫°nh m·∫Ω, linh ho·∫°t v√† d·ªÖ m·ªü r·ªông. üöÄ\n"
},
{
	"uri": "http://HuuDung113.github.io/vi/6-s3-static-website/",
	"title": "Tri·ªÉn khai Website Tƒ©nh v·ªõi Amazon S3",
	"tags": [],
	"description": "",
	"content": "1. Chu·∫©n b·ªã c√°c t·ªáp tin c·∫ßn thi·∫øt T·∫£i v·ªÅ 3 t·ªáp sau v√† l∆∞u v√†o m√°y t√≠nh:\nindex.html: Ch·ª©a c·∫•u tr√∫c v√† n·ªôi dung trang web. scripts.js: Ch·ª©a m√£ JavaScript k·∫øt n·ªëi v·ªõi API Gateway. styles.css: Ch·ª©a c√°c quy t·∫Øc ƒë·ªãnh d·∫°ng giao di·ªán. L∆∞u √Ω: Gi·ªØ nguy√™n t√™n t·ªáp v√† ph·∫ßn m·ªü r·ªông.\nGi·∫£i th√≠ch:\nüìÑ T·∫£i v·ªÅ index.html üìú T·∫£i v·ªÅ scripts.js üé® T·∫£i v·ªÅ styles.css 2. Ch·ªânh s·ª≠a t·ªáp scripts.js M·ªü t·ªáp scripts.js b·∫±ng tr√¨nh so·∫°n th·∫£o vƒÉn b·∫£n v√† s·ª≠a d√≤ng ƒë·∫ßu ti√™n:\nvar API_ENDPOINT = \u0026#34;https://xxxxx.execute-api.us-west-2.amazonaws.com/Dev\u0026#34;; Thay https://xxxxx... b·∫±ng URL Invoke m√† b·∫°n ƒë√£ sao ch√©p t·ª´ API Gateway.\nGi·∫£i th√≠ch:\nAPI_ENDPOINT: ƒê·ªãa ch·ªâ API m√† JavaScript s·∫Ω k·∫øt n·ªëi ƒë·ªÉ g·ªçi c√°c ch·ª©c nƒÉng chuy·ªÉn vƒÉn b·∫£n th√†nh gi·ªçng n√≥i. M·ªói l·∫ßn API Gateway thay ƒë·ªïi ho·∫∑c tri·ªÉn khai l·∫°i, c·∫ßn c·∫≠p nh·∫≠t URL n√†y. 3. T·∫°o Amazon S3 Bucket M·ªü AWS Management Console. T√¨m ki·∫øm v√† ch·ªçn S3. Ch·ªçn Create bucket. C·∫•u h√¨nh nh∆∞ sau: Bucket name: www-yourbucketname (t√™n c·∫ßn duy nh·∫•t tr√™n to√†n c·∫ßu) Region: ch·ªçn khu v·ª±c g·∫ßn nh·∫•t ƒë·ªÉ t·ªëi ∆∞u t·ªëc ƒë·ªô Object Ownership: ch·ªçn ACLs enabled Block Public Access: b·ªè ch·ªçn Block all public access T√≠ch ch·ªçn I acknowledge\u0026hellip; ƒë·ªÉ x√°c nh·∫≠n r·ªßi ro khi public Nh·∫•n Create bucket. Gi·∫£i th√≠ch:\nBucket l√† n∆°i l∆∞u tr·ªØ t·ªáp tin web. B·ªè ch·∫∑n quy·ªÅn truy c·∫≠p c√¥ng khai ƒë·ªÉ website c√≥ th·ªÉ hi·ªÉn th·ªã c√¥ng khai. L∆∞u √Ω: AWS khuy·∫øn c√°o kh√¥ng n√™n ƒë·ªÉ bucket ·ªü ch·∫ø ƒë·ªô public tr·ª´ khi th·∫≠t s·ª± c·∫ßn thi·∫øt.\n4. T·∫£i t·ªáp l√™n S3 M·ªü bucket v·ª´a t·∫°o. Ch·ªçn Upload. T·∫£i l√™n c√°c t·ªáp: index.html, scripts.js, styles.css. Nh·∫•n Upload v√† ƒë·ª£i qu√° tr√¨nh ho√†n t·∫•t. L∆∞u √Ω: T√™n t·ªáp ph·∫£i ch√≠nh x√°c v√† ph√¢n bi·ªát ch·ªØ hoa ch·ªØ th∆∞·ªùng.\nGi·∫£i th√≠ch:\nN·∫øu t√™n t·ªáp sai ho·∫∑c thi·∫øu, website s·∫Ω kh√¥ng hi·ªÉn th·ªã ƒë√∫ng. Upload th√†nh c√¥ng ! ‚úÖ\n5. C·∫≠p nh·∫≠t Bucket Policy Ch·ªçn Permissions. Cu·ªôn xu·ªëng Bucket Policy v√† ch·ªçn Edit. D√°n ch√≠nh s√°ch sau v√†o: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;PublicReadGetObject\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;Action\u0026#34;: [\u0026#34;s3:GetObject\u0026#34;], \u0026#34;Resource\u0026#34;: [\u0026#34;arn:aws:s3:::www-yourbucketname/*\u0026#34;] } ] } Thay www-yourbucketname b·∫±ng t√™n bucket c·ªßa b·∫°n. Ch·ªçn Save changes. Gi·∫£i th√≠ch:\nCho ph√©p m·ªçi ng∆∞·ªùi c√≥ th·ªÉ ƒë·ªçc c√°c t·ªáp trong bucket. AWS s·ª≠ d·ª•ng ARN (Amazon Resource Name) ƒë·ªÉ x√°c ƒë·ªãnh ch√≠nh x√°c bucket. L∆∞u √Ω: AWS s·∫Ω c·∫£nh b√°o v·ªÅ quy·ªÅn public, b·∫°n c√≥ th·ªÉ b·ªè qua v√¨ ƒë√¢y l√† trang web c√¥ng khai.\n6. K√≠ch ho·∫°t Website Hosting Ch·ªçn tab Properties. Cu·ªôn xu·ªëng Static website hosting. Ch·ªçn Edit v√† c·∫•u h√¨nh: Enable website hosting. Index document: index.html Error document: index.html (d√πng chung file khi x·∫£y ra l·ªói) Ch·ªçn Save changes. Sao ch√©p URL Endpoint hi·ªÉn th·ªã sau khi l∆∞u. Gi·∫£i th√≠ch:\nKhi b·∫≠t t√≠nh nƒÉng n√†y, S3 s·∫Ω ho·∫°t ƒë·ªông nh∆∞ m·ªôt m√°y ch·ªß web tƒ©nh. Endpoint URL l√† ƒë·ªãa ch·ªâ ƒë·ªÉ truy c·∫≠p website. 7. Ki·ªÉm tra k·∫øt qu·∫£ M·ªü tr√¨nh duy·ªát web. D√°n URL Endpoint v·ª´a sao ch√©p. Nh·∫≠p n·ªôi dung vƒÉn b·∫£n v√† nh·∫•n Say it. Ch·ªù ·ª©ng d·ª•ng chuy·ªÉn ƒë·ªïi vƒÉn b·∫£n th√†nh gi·ªçng n√≥i. K·∫øt qu·∫£ mong ƒë·ª£i:\nWebsite hi·ªÉn th·ªã giao di·ªán nh·∫≠p vƒÉn b·∫£n. Khi nh·∫•n Say it, ·ª©ng d·ª•ng s·∫Ω ph√°t gi·ªçng ƒë·ªçc c·ªßa vƒÉn b·∫£n. N·∫øu x·∫£y ra l·ªói, ki·ªÉm tra console tr√¨nh duy·ªát v√† c·∫•u h√¨nh API Gateway. Th√†nh c√¥ng ! üéâ Ch√∫c m·ª´ng! B·∫°n ƒë√£ tri·ªÉn khai th√†nh c√¥ng website tƒ©nh v·ªõi Amazon S3! üöÄ\n"
},
{
	"uri": "http://HuuDung113.github.io/vi/7-conclution/",
	"title": "K·∫øt Lu·∫≠n v√† H∆∞·ªõng Ph√°t Tri·ªÉn T∆∞∆°ng Lai",
	"tags": [],
	"description": "",
	"content": "üéØ K·∫øt Lu·∫≠n v√† H∆∞·ªõng Ph√°t Tri·ªÉn T∆∞∆°ng Lai üîç T·ªïng K·∫øt Trong workshop n√†y, ch√∫ng ta ƒë√£ c√πng nhau kh√°m ph√° v√† th·ª±c h√†nh x√¢y d·ª±ng m·ªôt ·ª©ng d·ª•ng Chuy·ªÉn VƒÉn B·∫£n Th√†nh Gi·ªçng N√≥i kh√¥ng m√°y ch·ªß s·ª≠ d·ª•ng Amazon Polly. T·ª´ vi·ªác thi·∫øt l·∫≠p m√¥i tr∆∞·ªùng, t√≠ch h·ª£p c√°c d·ªãch v·ª• AWS nh∆∞ Lambda, API Gateway, ƒë·∫øn vi·ªác qu·∫£n l√Ω v√† d·ªçn d·∫πp t√†i nguy√™n, b·∫°n ƒë√£ tr·∫£i qua to√†n b·ªô quy tr√¨nh ph√°t tri·ªÉn m·ªôt ·ª©ng d·ª•ng TTS hi·ªán ƒë·∫°i v√† hi·ªáu qu·∫£.\nüöÄ Nh·ªØng G√¨ B·∫°n ƒê√£ ƒê·∫°t ƒê∆∞·ª£c Hi·ªÉu bi·∫øt s√¢u s·∫Øc v·ªÅ Amazon Polly: N·∫Øm v·ªØng c√°ch th·ª©c ho·∫°t ƒë·ªông v√† l·ª£i √≠ch c·ªßa d·ªãch v·ª• chuy·ªÉn vƒÉn b·∫£n th√†nh gi·ªçng n√≥i n√†y. K·ªπ nƒÉng tri·ªÉn khai ki·∫øn tr√∫c kh√¥ng m√°y ch·ªß: S·ª≠ d·ª•ng AWS Lambda v√† API Gateway ƒë·ªÉ x√¢y d·ª±ng ·ª©ng d·ª•ng linh ho·∫°t, d·ªÖ m·ªü r·ªông. Kinh nghi·ªám th·ª±c ti·ªÖn: Th·ª±c h√†nh t·ª´ng b∆∞·ªõc t·ª´ ph√°t tri·ªÉn, tri·ªÉn khai ƒë·∫øn qu·∫£n l√Ω ·ª©ng d·ª•ng tr√™n n·ªÅn t·∫£ng AWS. üîÑ Quy Tr√¨nh Ho·∫°t ƒê·ªông C·ªßa ·ª®ng D·ª•ng D∆∞·ªõi ƒë√¢y l√† s∆° ƒë·ªì t·ªïng quan v·ªÅ quy tr√¨nh ho·∫°t ƒë·ªông c·ªßa ·ª©ng d·ª•ng TTS:\nNg∆∞·ªùi d√πng g·ª≠i y√™u c·∫ßu chuy·ªÉn ƒë·ªïi vƒÉn b·∫£n th√†nh gi·ªçng n√≥i th√¥ng qua giao di·ªán ·ª©ng d·ª•ng. API Gateway nh·∫≠n y√™u c·∫ßu v√† chuy·ªÉn ti·∫øp ƒë·∫øn AWS Lambda. H√†m Lambda x·ª≠ l√Ω y√™u c·∫ßu, g·ªçi Amazon Polly ƒë·ªÉ chuy·ªÉn ƒë·ªïi vƒÉn b·∫£n th√†nh gi·ªçng n√≥i. Amazon Polly tr·∫£ v·ªÅ t·ªáp √¢m thanh ƒë√£ chuy·ªÉn ƒë·ªïi. H√†m Lambda l∆∞u tr·ªØ t·ªáp √¢m thanh v√†o Amazon S3 v√† tr·∫£ v·ªÅ URL cho ng∆∞·ªùi d√πng. Ng∆∞·ªùi d√πng nh·∫≠n ƒë∆∞·ª£c li√™n k·∫øt v√† nghe t·ªáp √¢m thanh tr·ª±c ti·∫øp t·ª´ S3. üåü H∆∞·ªõng Ph√°t Tri·ªÉn T∆∞∆°ng Lai ƒê·ªÉ n√¢ng cao v√† m·ªü r·ªông ·ª©ng d·ª•ng:\nH·ªó tr·ª£ ƒëa ng√¥n ng·ªØ v√† gi·ªçng ƒë·ªçc: T√≠ch h·ª£p th√™m nhi·ªÅu ng√¥n ng·ªØ v√† gi·ªçng ƒë·ªçc kh√°c nhau ƒë·ªÉ ph·ª•c v·ª• ƒëa d·∫°ng ng∆∞·ªùi d√πng. Amazon Polly li√™n t·ª•c c·∫≠p nh·∫≠t c√°c gi·ªçng n√≥i m·ªõi, bao g·ªìm c·∫£ c√°c gi·ªçng n√≥i t·∫°o sinh t·ªïng h·ª£p v·ªõi kh·∫£ nƒÉng bi·ªÉu c·∫£m cao :contentReference[oaicite:0]{index=0}.\nT√πy ch·ªânh gi·ªçng n√≥i n√¢ng cao: S·ª≠ d·ª•ng Speech Synthesis Markup Language (SSML) ƒë·ªÉ ƒëi·ªÅu ch·ªânh ng·ªØ ƒëi·ªáu, t·ªëc ƒë·ªô v√† c·∫£m x√∫c c·ªßa gi·ªçng n√≥i, t·∫°o ra tr·∫£i nghi·ªám ng∆∞·ªùi d√πng phong ph√∫ h∆°n.\nT√≠ch h·ª£p v·ªõi c√°c d·ªãch v·ª• AI kh√°c: K·∫øt h·ª£p v·ªõi Amazon Transcribe ƒë·ªÉ chuy·ªÉn ƒë·ªïi gi·ªçng n√≥i th√†nh vƒÉn b·∫£n, t·∫°o ra ·ª©ng d·ª•ng h·ªó tr·ª£ c·∫£ hai chi·ªÅu chuy·ªÉn ƒë·ªïi.\nPh√°t tri·ªÉn ·ª©ng d·ª•ng di ƒë·ªông: S·ª≠ d·ª•ng AWS Amplify ƒë·ªÉ x√¢y d·ª±ng ·ª©ng d·ª•ng di ƒë·ªông th√¢n thi·ªán, cho ph√©p ng∆∞·ªùi d√πng truy c·∫≠p v√† s·ª≠ d·ª•ng d·ªãch v·ª• m·ªçi l√∫c, m·ªçi n∆°i.\nT·ªëi ∆∞u h√≥a chi ph√≠ v√† hi·ªáu su·∫•t: S·ª≠ d·ª•ng AWS CloudWatch v√† AWS Lambda Power Tuning ƒë·ªÉ gi√°m s√°t v√† ƒëi·ªÅu ch·ªânh hi·ªáu su·∫•t c·ªßa ·ª©ng d·ª•ng, ƒë·∫£m b·∫£o ho·∫°t ƒë·ªông m∆∞·ª£t m√† v·ªõi chi ph√≠ t·ªëi ∆∞u.\nC·∫£m ∆°n b·∫°n ƒë√£ tham gia workshop n√†y! Hy v·ªçng r·∫±ng nh·ªØng ki·∫øn th·ª©c v√† k·ªπ nƒÉng b·∫°n thu ƒë∆∞·ª£c s·∫Ω h·ªó tr·ª£ ƒë·∫Øc l·ª±c cho h√†nh tr√¨nh ph√°t tri·ªÉn ·ª©ng d·ª•ng c·ªßa b·∫°n. Ch√∫c b·∫°n th√†nh c√¥ng v√† h·∫πn g·∫∑p l·∫°i trong nh·ªØng ch∆∞∆°ng tr√¨nh ti·∫øp theo! üéâ\n"
},
{
	"uri": "http://HuuDung113.github.io/vi/8-cleanup/",
	"title": "D·ªçn D·∫πp T√†i Nguy√™n",
	"tags": [],
	"description": "",
	"content": "üßπ D·ªçn D·∫πp T√†i Nguy√™n Tr√™n AWS Sau khi ho√†n th√†nh h·ªôi th·∫£o, h√£y ƒë·∫£m b·∫£o x√≥a t·∫•t c·∫£ t√†i nguy√™n ƒë·ªÉ tr√°nh ph√°t sinh chi ph√≠ kh√¥ng mong mu·ªën.\nX√≥a AWS Lambda M·ªü AWS Console ‚Üí Chuy·ªÉn ƒë·∫øn AWS Lambda. Ch·ªçn h√†m Lambda ƒë√£ t·∫°o. Nh·∫•n Actions ‚Üí Delete ‚Üí X√°c nh·∫≠n x√≥a. X√≥a API Gateway M·ªü AWS Console ‚Üí Chuy·ªÉn ƒë·∫øn API Gateway. Ch·ªçn API ƒë√£ t·∫°o. Nh·∫•n Delete API ‚Üí X√°c nh·∫≠n x√≥a. X√≥a Amazon S3 Bucket M·ªü AWS Console ‚Üí Chuy·ªÉn ƒë·∫øn Amazon S3. Ch·ªçn bucket ƒë√£ t·∫°o. X√≥a t·∫•t c·∫£ c√°c file b√™n trong. Nh·∫•n Delete bucket ‚Üí X√°c nh·∫≠n x√≥a. X√≥a CloudWatch Logs M·ªü AWS Console ‚Üí Chuy·ªÉn ƒë·∫øn CloudWatch. Ch·ªçn Logs groups li√™n quan. Nh·∫•n Actions ‚Üí Delete log group ‚Üí X√°c nh·∫≠n x√≥a. ‚úÖ Ho√†n t·∫•t vi·ªác d·ªçn d·∫πp! B·∫°n ƒë√£ x√≥a t·∫•t c·∫£ t√†i nguy√™n AWS li√™n quan ƒë·∫øn h·ªôi th·∫£o n√†y. üéâ\n"
},
{
	"uri": "http://HuuDung113.github.io/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://HuuDung113.github.io/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]